{"version":3,"file":"static/js/563.cc41e8c6.chunk.js","mappings":"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","sources":["webpack://front/./src/Pages/Auth/Signup/Signup.module.css?4e8f","Pages/Auth/Signup/Signup.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Signup_container__7dFW3\",\"main\":\"Signup_main__LHeir\",\"girl\":\"Signup_girl__ETSP0\",\"boy\":\"Signup_boy__Vltw5\",\"logo\":\"Signup_logo__A4XBH\",\"submit\":\"Signup_submit__rVgZK\",\"links\":\"Signup_links__mMIGC\",\"emailContainer\":\"Signup_emailContainer__n8PFA\"};","import React, { useEffect } from 'react'\nimport classes from './Signup.module.css'\nimport logo from '../../../Assets/logo.png'\nimport { Controller, useForm } from 'react-hook-form'\nimport AdminInput from '../../../Components/UI/Form/AdminInput'\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport { useTranslation } from 'react-i18next'\nimport AuthWindow from '../../../Components/UI/AuthWindow/AuthWindow'\nimport { NavLink, useNavigate } from 'react-router-dom'\nimport InputPassword from '../../../Components/UI/Form/InputPassword'\nimport { Button } from '@mui/material'\n\nimport boy from '../../../Assets/boy.svg'\nimport girl from '../../../Assets/girl.svg'\nimport { connect } from 'react-redux'\nimport { register } from '../../../Redux/userReducer'\nimport Preloader from '../../../Components/Common/Preloader/Preloader'\nimport Error from '../../../Components/UI/Form/Error/Error'\nimport { setIsRegisterDone, setServerError, setServerMessage } from '../../../Redux/commonReducer'\nimport SomeInfoModal from '../../../Components/Modals/SomeInfoModal/SomeInfoModal'\nimport { Helmet } from 'react-helmet'\n\nconst Signup = (props) => {\n    const { \n        isFetching, \n        register, \n        serverError, \n        isRegisterDone, \n        setIsRegisterDone,\n        setServerError,\n        serverMessage,\n        setServerMessage,\n        currentLanguage\n    } = props\n\n    const { handleSubmit, control, watch } = useForm()\n\n    const { t } = useTranslation()\n\n    const navigate = useNavigate()\n\n    const onSubmit = (data) => {\n        register(data)\n    }\n\n    const onCloseInfoModal = () => {\n        setIsRegisterDone(false)\n        navigate(`/`)\n    }\n\n    useEffect(() => {\n        return () => {\n            setServerError(null)\n            setServerMessage(null)\n        }\n    }, [])\n\n    return (\n        <div className={classes.container}>\n            <Helmet \n                htmlAttributes={{\"lang\": \"ua\", \"amp\": undefined}}\n                title={`${t(\"siteName\")} | ${currentLanguage === \"ru\" ? \"Регистрация\" : \"Реєстрація\"}`}\n                meta={[{\"name\": \"description\", \"content\": t(\"siteDescription\")}]}\n            />\n            {isFetching && <Preloader/>}\n            {serverMessage && <SomeInfoModal text={serverMessage} onClose={onCloseInfoModal}/>}\n            <div className={classes.main}>\n                <NavLink to=\"/\" className={classes.logo}>\n                    <img src={logo} alt=\"logo\" />\n                </NavLink>\n                <AuthWindow title={t(\"auth.register\")} type=\"register\">\n                    <img src={girl} alt=\"girl\" className={classes.girl}/>\n                    <img src={boy} alt=\"boy\" className={classes.boy}/>\n                    <form onSubmit={handleSubmit(onSubmit)}>\n                        <Controller\n                            name=\"email\"\n                            control={control}\n                            defaultValue=\"\"\n                            rules={{ \n                                required: {\n                                    value: true,\n                                    message: t(\"errors.required\")\n                                },\n                                pattern: {\n                                    value: /^[A-Za-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}/,\n                                    message: t(\"errors.email\")\n                                }\n                            }}\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <div className={classes.emailContainer}>\n                                    <AdminInput\n                                        onChange={(e) => {\n                                            onChange(e)\n                                            setServerError(null)\n                                        }}\n                                        value={value}\n                                        error={error}\n                                        label={\"Email\"}\n                                        startAdornment={true}\n                                        startAdornmentIcon={<AccountCircleIcon/>}\n                                    />\n                                    {serverError && <Error text={serverError}/>}\n                                </div>\n                            )}\n                        />\n                        <Controller\n                            name=\"password\"\n                            control={control}\n                            defaultValue=\"\"\n                            rules={{ \n                                required: {\n                                    value: true,\n                                    message: t(\"errors.required\")\n                                },\n                                validate: {\n                                    value: (value) => value.length > 5 || t(\"errors.passLong\")\n                                }\n                            }}\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <InputPassword\n                                    error={error}\n                                    onChange={onChange}\n                                    value={value}  \n                                    label={t(\"auth.password\")}\n                                />\n                            )}\n                        />\n                        <Controller\n                            name=\"match_password\"\n                            control={control}\n                            rules={{ \n                                required: {\n                                    value: true,\n                                    message: t(\"errors.required\")\n                                },\n                                validate: {\n                                    value: (value) => value === watch('password') || t(\"errors.notMatch\")\n                                }\n                            }}\n                            defaultValue=\"\"\n                            render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                <InputPassword\n                                    error={error}\n                                    onChange={onChange}\n                                    value={value}  \n                                    label={t(\"auth.repeat_password\")}\n                                />\n                            )}\n                        />\n                        <Button type=\"submit\" className={classes.submit}>{t(\"auth.register\")}</Button>\n                    </form>\n                </AuthWindow>\n            </div>\n            <div className={classes.links}>\n                <NavLink to=\"/rules\">{t(\"navigation.footer.rules\")}</NavLink>\n                <NavLink to=\"/confidentiality\">{t(\"navigation.footer.conf\")}</NavLink>\n            </div>\n        </div>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n    isFetching: state.common.isFetching,\n    serverError: state.common.serverError,\n    serverMessage: state.common.serverMessage,\n    isRegisterDone: state.common.isRegisterDone,\n    currentLanguage: state.common.currentLanguage\n})\n\nexport default connect(mapStateToProps, {\n    register,\n    setServerError,\n    setIsRegisterDone,\n    setServerMessage\n})(Signup)"],"names":["connect","state","isFetching","common","serverError","serverMessage","isRegisterDone","currentLanguage","register","setServerError","setIsRegisterDone","setServerMessage","props","useForm","handleSubmit","control","watch","t","useTranslation","navigate","useNavigate","useEffect","className","classes","Helmet","htmlAttributes","undefined","title","meta","Preloader","SomeInfoModal","text","onClose","to","src","logo","alt","AuthWindow","type","girl","boy","onSubmit","data","name","defaultValue","rules","required","value","message","pattern","render","field","onChange","error","fieldState","AdminInput","e","label","startAdornment","startAdornmentIcon","AccountCircle","Error","validate","length","InputPassword","Button"],"sourceRoot":""}