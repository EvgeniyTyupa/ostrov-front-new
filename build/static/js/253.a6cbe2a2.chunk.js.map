{"version":3,"file":"static/js/253.a6cbe2a2.chunk.js","mappings":"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","sources":["webpack://front/./src/Components/Common/Items/SmallItem/SmallItem.module.css?c06a","webpack://front/./src/Components/Common/Items/SmallItem/Baige/Baige.module.css?ab0f","Components/Common/Items/SmallItem/Baige/Baige.jsx","Components/Common/Items/SmallItem/SmallItem.jsx","webpack://front/./src/Components/Common/Items/SmallItemsList/SmallItemsList.module.css?a5f9","Components/Common/Items/SmallItemsList/SmallItemsList.jsx","webpack://front/./src/Components/Common/News/NewsSmallItem/NewsSmallItem.module.css?85aa","Components/Common/News/NewsSmallItem/NewsSmallItem.jsx","webpack://front/./src/Components/Common/Slider/Slider.module.css?e864","Components/Common/Slider/CustomSlider.jsx","Components/UI/Form/PrettoSlider/PrettoSlider.jsx","webpack://front/./src/Components/Common/InstaBlock/InstaBlock.module.css?fcf0","Assets/girl2.svg","Assets/boy2.svg","Components/Common/InstaBlock/InstaBlock.jsx","webpack://front/./src/Components/Common/Items/HgTags/HgTag/HgTag.module.css?c648","Components/Common/Items/HgTags/HgTag/HgTag.jsx","webpack://front/./src/Components/Common/Items/HgTags/HgTags.module.css?f78d","Components/Common/Items/HgTags/HgTags.jsx","webpack://front/./src/Components/Common/News/NewsList.module.css?494f","Components/Common/News/NewsList.jsx","webpack://front/./src/Components/Common/ToySelector/ToySelector.module.css?08a0","Components/Common/ToySelector/ToySelector.jsx","webpack://front/./src/Pages/Home/Home.module.css?51fa","webpack://front/./src/Components/Common/Brands/BrandItem.module.css?9bd9","Components/Common/Brands/BrandItem.jsx","Assets/sun.svg","webpack://front/./src/Components/Common/MainSlide/MainSlide.module.css?1298","Components/Common/MainSlide/MainSlide.jsx","Pages/Home/Home.jsx","Pages/Home/HomeContainer.jsx","Utils/shuffle.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"SmallItem_main__x7HX-\",\"image\":\"SmallItem_image__xlWNf\",\"info\":\"SmallItem_info__juLgQ\",\"left\":\"SmallItem_left__yViBi\",\"price\":\"SmallItem_price__koIZq\",\"inAction\":\"SmallItem_inAction__eFI7z\",\"discount\":\"SmallItem_discount__ZOaXW\",\"buyBut\":\"SmallItem_buyBut__W86Ev\"};","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Baige_main__HFBZW\",\"new\":\"Baige_new__nQ3zh\",\"currency\":\"Baige_currency__d6172\"};","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { cx } from '../../../../../Utils/classnames'\nimport classes from './Baige.module.css'\n\nconst Baige = (props) => {\n    const { \n        type = \"new\",\n        value\n    } = props\n\n    const { t } = useTranslation()\n\n    return (\n        <div className={cx(classes.main, type === \"new\" ? classes.new : '')}>\n            <label>\n                {type === \"new\" && \"NEW\"}\n                {/* {type === \"action\" && t(\"items.baige\")} */}\n                {type === \"discount\" &&  \n                    (value.includes(\"%\") ? \"-\" + value \n                    : \n                    <span>\n                        -\n                        {value}\n                        <label className={classes.currency}>&nbsp;грн.</label>\n                    </span> \n                )}\n            </label>\n        </div>\n    )\n}\n\nexport default Baige","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport classes from './SmallItem.module.css'\nimport { Rating } from 'react-simple-star-rating'\nimport { Button } from '@mui/material'\nimport { useTranslation } from 'react-i18next'\nimport moment from 'moment'\nimport Baige from './Baige/Baige'\nimport { useNavigate } from 'react-router-dom'\nimport { priceParser } from '../../../../Utils/priceParser'\nimport { discountParser } from '../../../../Utils/discountParser'\nimport { cx } from '../../../../Utils/classnames'\n\nconst SmallItem = (props) => {\n    const { item, currentLanguage, className } = props\n\n    // console.log(item)\n\n    const { t } = useTranslation()\n\n    const [isNew, setIsNew] = useState(false)\n    const [discount, setDiscount] = useState(null)\n\n    const navigate = useNavigate()\n\n    const rating = item.rating * 20\n\n    const handleClick = () => {\n        let itemName = currentLanguage === \"ru\" ? item.name : item.name_ua\n\n        navigate(`/item/${itemName}`)\n    }\n\n    let price = priceParser(item.price)\n    \n    useEffect(() => {\n        if(item && item.action) {\n            setDiscount(discountParser(item.price, item.action.discount))\n        }\n    }, [item])\n\n    useEffect(() => {\n        if(moment(item.created_at).diff(moment(), 'days') >= -30) {\n            setIsNew(true)\n        }\n    }, [])\n\n    return (\n        <div className={cx(classes.main, className)}  onClick={handleClick}>\n            {isNew && <Baige type=\"new\"/>}\n            {(item.action && !item.action.from_items_count && !item.action.from_sum_in_bill) \n                && <Baige type=\"discount\" value={item.action.discount}/>\n            }\n            <img src={item.images[0]} alt=\"image\" className={classes.image}/>\n            <div className={classes.info}>\n                <div className={classes.left}>\n                    <p>{\n                        currentLanguage === \"ru\" ? item.name\n                        : item.name_ua   \n                    }</p>\n                    <Rating size={\"22px\"} ratingValue={rating} readonly/>\n                </div>\n                <div className={classes.price}>\n                    {(item.action && item.action.from_sum_in_bill === 0 && !item.action.from_items_count) && \n                        <p className={classes.discount}>{discount} грн</p>\n                    }\n                    <p className={cx(classes.price, (item.action && (item.action.from_sum_in_bill === 0 && !item.action.from_items_count)) ? classes.inAction : undefined)}>{price} грн</p>\n                </div>\n            </div>\n            <Button\n                className={classes.buyBut}\n                onClick={handleClick}\n            >\n                {t(\"actions.buy\")}\n            </Button>\n        </div>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n    currentLanguage: state.common.currentLanguage\n})\n\nexport default connect(mapStateToProps, null)(SmallItem)","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"SmallItemsList_main__c5mdz\",\"header\":\"SmallItemsList_header__D1zKL\",\"slider\":\"SmallItemsList_slider__g5AvO\",\"item\":\"SmallItemsList_item__oXrVT\"};","import React from 'react'\nimport classes from './SmallItemsList.module.css'\nimport { useTranslation } from 'react-i18next'\nimport { NavLink } from 'react-router-dom'\nimport CustomSlider from '../../Slider/CustomSlider'\nimport SmallItem from '../SmallItem/SmallItem'\nimport { cx } from '../../../../Utils/classnames'\n\nconst SmallItemsList = (props) => {\n    const { items, href, title, slidesToShow = 5 } = props\n\n    const { t } = useTranslation()\n\n    return (\n        <div className={classes.main}>\n            <div className={classes.header}>\n                <h4>{title}</h4>\n                {(href && items.length >= 5 ) && <NavLink to={href}>{t(\"items.listTextHref\")}</NavLink>}\n            </div>\n            <div className={cx(classes.slider, items.length < 5 ? classes.notFull : \"\")}>\n                <CustomSlider slidesToShow={slidesToShow}>\n                    {items.map(item => <SmallItem key={item._id} item={item} className={classes.item}/>)}\n                </CustomSlider>\n            </div>\n        </div>\n    )\n}\n\nexport default SmallItemsList","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"NewsSmallItem_main__1V8Ck\",\"img\":\"NewsSmallItem_img__q69RQ\",\"info\":\"NewsSmallItem_info__hZl79\",\"date\":\"NewsSmallItem_date__+z+My\"};","import React from 'react'\nimport { connect } from 'react-redux'\nimport classes from './NewsSmallItem.module.css'\nimport { BsCalendar } from 'react-icons/bs';\nimport moment from 'moment'\nimport { useNavigate } from 'react-router-dom';\nimport { cx } from '../../../../Utils/classnames';\n\nconst NewsSmallItem = (props) => {\n    const { item, currentLanguage, className } = props\n\n    const navigate = useNavigate()\n    let postName = currentLanguage === \"ru\" ? item.title : item.title_ua\n\n    const onClick = () => {\n        navigate(`/blog/${postName}`)\n    }\n\n    return (\n        <div className={cx(classes.main, className)}>\n            <img src={item.images[0]} onClick={onClick} alt=\"title img\" className={classes.img}/>\n            <div className={classes.info}>\n                <p onClick={onClick}>{currentLanguage === \"ru\" ? item.title : item.title_ua}</p>\n                <div className={classes.date}>\n                    <BsCalendar/>\n                    <span>{moment(item.created_at).format(\"DD/MM/YYYY\")}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n    currentLanguage: state.common.currentLanguage\n})\n\nexport default connect(mapStateToProps, null)(NewsSmallItem)","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Slider_main__XUYQb\",\"slideBut\":\"Slider_slideBut__WU2lx\",\"slider\":\"Slider_slider__zVo6c\"};","import { IconButton } from '@mui/material';\nimport React from 'react'\nimport Slider from \"react-slick\";\nimport classes from './Slider.module.css'\nimport { FiArrowRight, FiArrowLeft } from 'react-icons/fi';\nimport useWindowDimensions from '../../../Hooks/useWindowDimension';\n\nfunction SampleNextArrow(props) {\n    const { className, style, onClick, type } = props;\n    const { width } = useWindowDimensions()\n\n    return (\n        <div\n            className={className}\n            style={{ \n                ...style, \n                display: \"block\", \n                padding: 0,\n                zIndex: 5,\n                right: type === \"items\" ? \n                (width < 768 ? \"4%\" : 0) : (width < 768 ? \"9%\" : \"5%\"),\n                top: (width < 768 && type === \"items\") ? \"43%\" : \"48%\"\n            }}\n        >\n            <IconButton\n                onClick={onClick}\n                className={classes.slideBut}\n            >\n                <FiArrowRight/>\n            </IconButton>\n        </div>\n    );\n}\n  \nfunction SamplePrevArrow(props) {\n    const { className, style, onClick, type } = props;\n    const { width } = useWindowDimensions()\n\n    return (\n        <div \n            className={className}\n            style={{ \n                ...style, \n                display: \"block\", \n                padding: 0,\n                zIndex: 5,\n                left:  type === \"items\" ? \"-20px\" : \"4%\",\n                top: (width < 768 && type === \"items\") ? \"43%\" : \"48%\"\n            }}\n        >\n            <IconButton\n                onClick={onClick}\n                className={classes.slideBut}\n            >\n                <FiArrowLeft/>\n            </IconButton>\n        </div>\n    );\n}\n\nconst CustomSlider = (props) => {\n    const { \n        children,\n        dots = false,\n        infinite = true,\n        speed = 500,\n        slidesToShow = 1,\n        slidesToScroll = 1,\n        autoplay = false,\n        vertical = false,\n        verticalSwiping = false,\n        type = \"items\",\n        responsive = [\n            {\n                breakpoint: 1170,\n                settings: {\n                  slidesToShow: 4,\n                  slidesToScroll: 1,\n                }\n            },\n            {\n                breakpoint: 862,\n                settings: {\n                  slidesToShow: 3,\n                  slidesToScroll: 1,\n                }\n            },\n            {\n              breakpoint: 600,\n              settings: {\n                slidesToShow: 2,\n                slidesToScroll: 1,\n              }\n            },\n            {\n              breakpoint: 480,\n              settings: {\n                slidesToShow: 1,\n                slidesToScroll: 1\n              }\n            }\n        ]\n    } = props\n\n    const settings = {\n        dots: dots,\n        infinite: infinite,\n        speed: speed,\n        slidesToShow: slidesToShow,\n        slidesToScroll: slidesToScroll,\n        autoplay: autoplay,\n        swipeToSlide: true,\n        adaptiveHeight: true,\n        arrows: true,\n        draggable: true,\n        vertical: vertical,\n        verticalSwiping: verticalSwiping,\n        nextArrow: <SampleNextArrow type={type}/>,\n        prevArrow: <SamplePrevArrow type={type}/>,\n        className: classes.slider,\n        responsive: responsive,\n    };\n\n    return(\n        <div className={classes.main}>\n            <Slider {...settings}>\n                {children}\n            </Slider>\n        </div>\n    )\n}\n\nexport default CustomSlider","import React from 'react'\nimport Slider from '@mui/material/Slider';\nimport styled from '@emotion/styled';\n\nconst PrettoSlider = styled(Slider)({\n    color: '#9DC8CF',\n    height: 3,\n    width: \"100%\",\n    margin: \"auto\",\n    \"@media screen and (max-width: 468px)\": {\n      width: \"97%\"\n    },\n    '& .MuiSlider-track': {\n      border: 'none',\n    },\n    '& .MuiSlider-thumb': {\n      height: 24,\n      width: 24,\n      backgroundColor: '#E86589',\n      border: '6px solid currentColor',\n      '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n        boxShadow: 'inherit',\n      },\n      '&:before': {\n        display: 'none',\n      },\n    },\n    '& .MuiSlider-valueLabel': {\n      lineHeight: 1.2,\n      fontSize: 12,\n      background: 'unset',\n      padding: 0,\n      width: 32,\n      height: 32,\n      borderRadius: '50% 50% 50% 0',\n      backgroundColor: '#9DC8CF',\n      transformOrigin: 'bottom left',\n      transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',\n      '&:before': { display: 'none' },\n      '&.MuiSlider-valueLabelOpen': {\n        transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',\n      },\n      '& > *': {\n        transform: 'rotate(45deg)',\n      },\n    },\n});\n\nconst CustomPrettoSlider = (props) => {\n    const {\n        value,\n        onChange,\n        max\n    } = props\n\n    return (\n        <PrettoSlider\n            getAriaLabel={() => 'Temperature range'}\n            value={value}\n            onChange={onChange}\n            valueLabelDisplay=\"auto\"\n            max={max}\n        />\n    )\n}\n\nexport default CustomPrettoSlider","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"InstaBlock_main__-yNQM\",\"info\":\"InstaBlock_info__fAVuY\",\"button\":\"InstaBlock_button__6f7MF\",\"girl\":\"InstaBlock_girl__LbkY0\",\"boy\":\"InstaBlock_boy__cuHXa\"};","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgGirl2(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 127,\n    height: 209,\n    viewBox: \"0 0 127 209\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M41.5219 57.4924C42.3849 58.5398 43.14 59.5872 44.003 60.4252C44.9739 61.3678 45.9448 62.4152 47.1314 63.1484C49.7204 64.8242 52.4173 65.0337 55.2221 63.6721C58.7819 61.9962 61.1552 59.273 62.3418 55.6071C62.5576 54.9787 62.7733 54.2455 62.9891 53.3029C63.7442 53.9313 64.2836 54.3503 64.823 54.874C66.6568 56.4451 68.5986 57.8067 70.9719 58.4351C71.727 58.6446 72.59 58.7493 73.453 58.8541C76.1499 59.0635 77.6601 57.3877 78.3074 55.8166C78.5231 55.1882 78.7389 54.5597 78.8467 54.036C79.494 53.7218 79.6019 54.2455 79.9255 54.455C81.3279 55.7119 82.6224 57.0735 84.1326 58.2256C85.7508 59.4825 87.4768 60.2157 89.5264 60.5299C90.0658 60.5299 90.4973 60.6346 91.0366 60.6346C94.0571 60.5299 95.5674 59.273 96.6462 56.1308C96.9698 56.5498 97.1855 56.864 97.4013 57.283C98.9115 61.0536 99.6667 65.0337 99.9903 69.1185C100.53 76.974 98.3722 84.201 95.028 91.1138C94.165 92.8944 93.302 94.5702 92.2233 96.2461C88.2319 102.53 82.5145 106.825 75.8262 109.967C73.8845 110.91 71.8349 111.538 69.7852 111.957C67.0883 112.585 64.3915 113.004 61.6946 113.214C53.2803 113.842 45.2975 112.585 37.6384 109.024C33.4313 107.139 29.5478 104.73 26.2036 101.693C21.1335 97.084 16.7106 91.9517 13.798 85.7721C13.4743 85.1437 13.2586 84.4105 13.0428 83.7821C13.0428 83.6773 13.1507 83.4678 13.2586 83.1536C13.6901 83.1536 14.2295 83.1536 14.661 83.2584C16.0634 83.5726 17.3579 83.1536 18.3287 82.1062C19.1917 81.2683 20.0547 80.3257 20.702 79.2783C22.428 76.6598 23.7225 73.8318 24.8012 71.0038C25.1249 70.2707 25.1249 69.4328 25.9879 68.8043C26.4194 69.328 26.8509 69.8517 27.2824 70.1659C28.0375 70.6896 28.7926 71.1086 29.6556 71.4228C31.058 71.9465 32.4604 71.6323 33.647 70.6896C34.8336 69.747 35.6966 68.4901 36.3439 67.2332C37.8542 64.4053 39.3644 61.5773 40.7668 58.8541C40.8747 58.5398 41.1983 58.1209 41.5219 57.4924ZM67.5198 89.9617C67.5198 90.9043 67.6277 91.9517 67.5198 92.8944C67.3041 94.5702 65.4702 96.4555 63.8521 96.7697C61.371 97.2934 58.4583 95.8271 57.7032 93.4181C57.3796 92.4754 57.3796 91.5328 57.1638 90.5901C57.0559 90.0664 56.8402 89.6475 56.3008 89.5427C55.7614 89.438 55.1142 89.8569 55.0063 90.4854C54.8984 90.7996 54.8984 91.1138 54.8984 91.428C55.0063 95.1987 57.1638 97.8171 61.0473 98.6551C64.6072 99.493 68.4907 97.3982 69.4616 93.9418C70.1089 91.7423 69.6773 89.438 69.2458 87.2385C69.138 86.8195 68.4907 86.4005 68.0592 86.61C67.7356 86.8195 67.3041 87.1337 67.3041 87.4479C67.3041 88.3906 67.412 89.1238 67.5198 89.9617ZM45.2975 85.5626C45.2975 83.6773 44.003 82.6299 41.8455 82.6299C39.7959 82.6299 38.2857 83.8868 38.2857 85.7721C38.2857 87.5527 39.7959 89.019 41.5219 89.019C43.5715 89.019 45.2975 87.4479 45.2975 85.5626ZM81.22 75.0887C81.3279 73.7271 80.5727 72.5749 79.494 72.156C77.5522 71.5275 75.0711 72.7844 74.5317 74.6697C74.2081 76.0313 74.8554 77.6024 76.1499 78.1261C78.3074 79.0688 81.1121 77.393 81.22 75.0887Z\",\n    fill: \"#FFEAE3\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M22.7519 46.4947C25.0173 46.809 26.7433 45.971 28.1457 44.6094C29.6559 43.3526 31.0583 41.8862 32.4607 40.6294C33.1079 40.1057 33.6473 39.4772 34.2945 39.0583C34.9418 38.6393 35.589 38.3251 36.3442 38.2203C37.5308 38.0109 38.8253 37.6967 39.9041 37.2777C41.3064 36.754 42.4931 36.1256 42.9246 34.764C45.7293 34.0308 48.4262 33.4023 51.0152 32.7739C52.7412 32.355 54.4672 32.1455 56.1932 32.0407C64.4996 31.4123 72.2666 33.2976 79.4943 37.173C85.6432 40.5246 90.4975 45.2379 94.1653 51.1033C94.4889 51.7317 94.7047 52.2554 94.4889 52.9886C94.2732 54.036 94.1653 55.0834 93.9496 56.1308C93.6259 57.7018 92.8708 58.3303 91.2527 58.435C89.8503 58.5397 88.5558 58.435 87.3692 57.7018C85.9668 56.9687 84.6723 56.1308 83.4857 55.0834C81.7597 53.617 80.2494 52.0459 79.0628 50.1606C78.847 49.8464 78.5234 49.5322 78.1998 49.218C77.8761 48.9037 77.0131 49.1132 76.9053 49.5322C76.7974 49.9511 76.6895 50.2654 76.5816 50.6843C76.4738 51.8364 76.4738 52.9886 76.258 54.036C75.9344 56.1308 74.6399 56.9687 72.4824 56.5497C69.0304 55.9213 66.4414 54.036 64.2839 51.4175C63.7445 50.6843 63.313 49.9511 62.7736 49.218C62.5579 48.9037 62.3421 48.6943 62.1264 48.4848C61.6949 48.1706 60.8319 48.3801 60.724 48.9038C60.6161 49.3227 60.6161 49.8464 60.6161 50.3701C60.5082 51.5222 60.5082 52.6744 60.2925 53.7217C59.6452 57.2829 57.4877 59.9014 54.2515 61.5772C52.094 62.6246 49.9365 62.5198 47.8868 61.1582C45.8372 59.6919 44.3269 57.8066 43.0324 55.6071C42.7088 55.0834 42.4931 54.5597 42.1694 54.1407C41.7379 53.617 40.7671 53.617 40.4434 54.1407C40.1198 54.5597 39.9041 55.0834 39.5804 55.6071C37.8544 58.9587 36.1284 62.4151 34.2945 65.7668C33.7552 66.7094 33.1079 67.6521 32.3528 68.5947C31.3819 69.6421 30.3032 69.7468 29.0087 69.0137C28.0378 68.3852 27.3905 67.4426 26.7433 66.3952C26.3118 65.7668 25.9882 65.1383 25.5567 64.5099C25.0173 63.8815 24.0464 64.0909 23.7228 64.8241C23.6149 65.2431 23.507 65.662 23.507 65.9762C22.644 70.48 20.5944 74.5649 18.2211 78.4402C18.0054 78.7544 17.7896 79.0686 17.466 79.3829C16.0636 81.0587 14.014 81.2682 12.1801 80.116C11.5329 79.6971 11.425 79.0686 11.3171 78.4402C10.9935 75.717 10.7777 72.9938 11.1014 70.1658C11.7486 64.5099 13.6904 59.2729 16.7109 54.4549C18.6526 52.0459 20.7023 49.4274 22.7519 46.4947Z\",\n    fill: \"#AE7251\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M57.0574 115.623C62.667 115.413 68.0607 114.89 73.2387 113.318C74.749 115.204 75.612 117.299 76.7986 119.289C82.516 129.448 87.5861 139.817 91.4696 150.815C90.8224 152.491 89.3121 153.119 87.8019 153.643C83.5947 155.319 79.2797 156.366 74.749 156.471C70.434 156.471 66.119 156.785 61.804 156.052C57.8126 155.319 53.8212 154.376 49.8298 153.538C48.751 153.329 47.6723 152.7 46.5935 152.177C45.8384 151.758 45.6227 151.339 45.9463 150.606C46.0542 150.187 46.2699 149.872 46.4857 149.558C49.1825 144.216 51.1243 138.665 52.7424 132.905C54.1448 127.877 55.5472 122.954 56.4102 117.822C56.6259 116.984 56.8417 116.461 57.0574 115.623Z\",\n    fill: \"#FFBD22\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M39.6895 162.232C40.3367 160.451 42.9257 155.947 44.6517 153.643C44.9753 153.748 45.299 153.852 45.7305 154.062C47.6722 155.005 49.7219 155.738 51.7715 156.261C56.9495 157.518 62.1275 158.67 67.5213 158.775C71.7284 158.88 76.0434 158.88 80.2506 158.251C84.2419 157.623 88.0176 156.366 91.4696 154.376C91.7932 154.167 92.2247 154.062 92.6562 153.852C93.9507 156.576 94.3822 159.404 94.1665 162.232C94.0586 163.07 93.6271 163.803 92.872 164.222C92.009 164.641 91.0381 165.06 90.0672 165.374C86.1837 166.526 82.0844 167.154 77.9852 167.259C74.8568 167.364 71.6205 167.364 68.4921 167.469C62.1275 167.573 55.8707 166.631 49.7218 165.269C46.8092 164.641 43.8966 163.803 41.0918 163.07C40.5525 162.651 40.121 162.336 39.6895 162.232Z\",\n    fill: \"#FF824C\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M38.7185 27.7465C37.1004 28.2702 35.4823 28.7939 33.7563 29.4223C29.2255 26.6991 25.1262 23.5569 22.1057 19.0531C19.9482 15.8062 19.5167 12.2451 20.3797 8.57919C20.5955 7.84601 20.9191 7.11283 21.3506 6.37965C21.7821 5.64648 22.6451 5.54174 23.2924 6.06544C23.9396 6.69388 24.5869 7.32231 25.1262 8.05549C25.8814 9.20762 26.5286 10.4645 27.1759 11.6166C27.4995 12.1403 27.7152 12.664 28.0389 13.083C28.2546 13.2924 28.794 13.5019 29.1176 13.3972C29.4412 13.2924 29.7649 12.8735 29.8727 12.5593C29.9806 12.1403 29.9806 11.6166 29.9806 11.0929C30.1964 9.31235 30.4121 7.53179 30.7358 5.85596C30.8436 4.9133 31.2751 3.97065 32.0303 3.13274C32.3539 3.44696 32.6775 3.65644 32.7854 3.97066C33.2169 4.91331 33.4326 5.9607 33.8641 6.90335C33.972 7.32231 34.0799 7.74127 34.2956 8.05549C34.5114 8.26497 34.835 8.57919 35.0508 8.57919C35.3744 8.57919 35.9138 8.26497 36.0216 8.05549C36.3453 7.21757 36.561 6.37966 36.7768 5.54174C36.8846 5.12279 37.2083 4.70383 37.424 4.18013C38.287 5.437 38.3949 6.79862 38.6106 8.05549C38.8264 9.31236 39.0421 10.5692 39.0421 11.9308C39.4736 17.1678 39.4736 22.4048 38.7185 27.7465Z\",\n    fill: \"#AE7251\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M5.16851 124.211C5.38426 122.954 6.24727 122.535 6.89452 122.012C7.32602 121.698 7.75752 121.488 8.08114 121.174C8.62052 120.755 8.40477 119.812 7.75752 119.603C7.21814 119.393 6.67876 119.393 6.03151 119.184C5.38426 118.974 4.73701 118.87 4.08976 118.66C3.55039 118.451 3.22676 118.136 3.33463 117.508C3.44251 116.984 3.76614 116.565 4.30551 116.461C4.73701 116.356 5.16851 116.461 5.49214 116.461C6.03151 116.461 6.46302 116.251 6.67877 115.727C6.89452 115.204 6.57089 114.785 5.92364 114.366C5.70789 114.261 5.49214 114.156 5.27639 114.052C3.44251 113.004 3.11888 112.166 3.55039 109.757C4.52126 109.443 5.49214 109.862 6.35514 110.176C7.75752 110.595 9.15989 111.224 10.5623 111.747C11.2095 111.957 11.641 112.376 12.0725 112.9C12.3962 113.318 12.8277 113.528 13.367 113.318C13.9064 113.109 14.1222 112.69 14.1222 112.166C14.1222 111.747 13.9064 111.224 13.9064 110.805C13.7985 110.072 13.7985 109.338 13.7985 108.605C13.9064 107.977 14.3379 107.453 14.8773 107.034C15.6324 106.615 16.3875 106.825 16.819 107.558C17.0348 107.977 17.2505 108.396 17.3584 108.919C17.682 110.595 17.8978 112.271 18.2214 113.947C18.3293 114.471 18.2214 115.099 18.3293 115.623C19.0844 118.66 18.545 121.593 17.3584 124.316C16.1718 127.249 13.9064 128.61 10.5623 128.61C9.91502 127.772 10.2386 126.725 10.4544 125.887C10.5623 125.468 10.778 124.944 10.8859 124.526C10.9938 123.792 10.2386 123.269 9.5914 123.478C9.1599 123.688 8.7284 124.002 8.29689 124.211C7.32602 124.63 6.35514 124.735 5.16851 124.211Z\",\n    fill: \"#FFEAE3\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M19.1923 97.9217C18.3293 98.1312 17.8978 98.4454 17.4663 98.4454C13.7985 98.5501 10.2387 98.1312 7.32603 95.7222C4.19764 93.2084 2.68739 89.8567 3.33464 85.7719C3.65826 83.7819 5.06065 82.525 7.0024 81.8966C8.62053 81.4776 9.80716 82.0013 10.4544 83.4676C10.8859 84.4103 11.2095 85.4577 11.641 86.4004C13.1513 89.8568 15.2009 92.9989 17.5742 95.9316C18.1136 96.4553 18.5451 97.0838 19.1923 97.9217Z\",\n    fill: \"#FFEAE3\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M113.152 86.5051C114.015 86.6099 114.231 87.1336 114.339 87.6573C114.447 88.5999 114.447 89.5426 114.447 90.59C114.447 91.9516 114.662 92.4753 115.31 92.58C116.281 92.6847 116.496 91.9516 116.928 91.3231C117.359 90.6947 117.683 90.0663 118.222 89.5426C118.546 89.2284 119.085 88.9141 119.517 89.2284C119.84 89.4378 120.056 89.9615 120.056 90.2757C119.948 91.1137 119.733 91.8468 119.517 92.58C119.409 92.9989 119.085 93.3132 119.085 93.7321C119.085 94.0463 119.301 94.57 119.517 94.7795C119.733 94.989 120.38 94.989 120.596 94.7795C121.351 94.2558 121.89 93.5226 122.969 93.5226C123.4 93.5226 123.724 93.6274 124.048 93.7321C124.263 94.3606 123.94 94.6748 123.616 94.8842C123.292 95.0937 122.861 95.3032 122.537 95.5127C121.566 96.1411 121.566 97.0838 122.645 97.6075C123.077 97.8169 123.616 97.9217 124.048 98.2359C124.371 98.4454 124.695 98.7596 125.126 99.0738C124.695 99.388 124.479 99.7022 124.155 99.9117C122.429 100.645 120.703 100.854 118.87 100.959C117.899 100.959 116.928 100.959 115.957 101.064C113.907 101.273 112.181 100.959 110.779 99.388C109.376 97.8169 108.082 96.3506 106.68 94.7795C106.14 94.0463 105.709 93.3132 105.709 92.3705C105.709 92.0563 105.924 91.6373 106.14 91.5326C106.464 91.4279 107.003 91.3231 107.219 91.5326C107.974 92.161 108.621 92.8942 109.269 93.6274C109.7 94.1511 110.132 94.989 110.995 94.57C111.75 94.2558 111.75 93.5226 111.75 92.8942C111.858 91.1137 111.965 89.3331 112.613 87.6573C112.613 87.2383 112.936 86.9241 113.152 86.5051Z\",\n    fill: \"#FFEAE3\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M102.364 74.8792C102.364 73.6223 102.256 72.8891 102.256 72.0512C102.256 67.5474 101.609 63.1483 100.314 58.9587C100.206 58.7492 100.206 58.5397 100.099 58.2255C99.3435 56.5497 100.314 55.188 101.609 54.2454C102.688 53.4074 104.629 53.198 106.032 54.2454C107.758 55.607 108.836 57.1781 109.052 59.3776C109.484 64.3004 107.973 68.5948 105.169 72.5749C104.845 73.0986 104.306 73.5176 103.766 73.9365C103.551 74.146 103.119 74.3555 102.364 74.8792Z\",\n    fill: \"#FFEAE3\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M122.104 164.85C122.644 166.003 122.644 167.155 122.32 168.202C120.918 172.182 118.545 175.324 114.769 177.524C114.661 177.628 114.445 177.628 114.23 177.628C113.582 177 113.259 176.162 113.582 175.324C114.553 172.077 115.848 169.04 118.329 166.736C119.084 166.003 120.055 165.479 120.918 164.955C121.241 164.746 121.673 164.85 122.104 164.85Z\",\n    fill: \"#DB9245\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M51.3381 195.015C51.7696 195.853 52.309 196.796 52.7405 197.739C53.4957 199.414 54.2508 201.195 55.0059 202.871C55.4374 203.813 55.5453 204.756 55.4374 205.699C55.3295 206.432 54.6823 206.746 53.9272 206.641C53.0642 206.432 52.4169 206.013 51.8775 205.385C50.0436 203.29 49.0728 200.881 48.9649 198.158C48.857 196.482 49.5043 195.434 51.3381 195.015Z\",\n    fill: \"#DB9245\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M42.2777 32.4597C41.1989 31.4123 40.9832 30.3649 40.9832 29.2127C40.9832 27.5369 41.3068 25.861 41.7383 24.1852C42.4934 21.2525 43.68 18.5293 45.406 16.0155C46.0533 14.9681 46.9163 14.0255 47.8872 13.2923C49.0738 12.3496 50.1525 12.5591 51.1234 13.816C52.2022 15.1776 52.6337 16.8534 52.8494 18.5293C53.1731 21.8809 53.173 25.1279 52.9573 28.4795C52.8494 29.4222 52.6337 30.1554 51.5549 30.5743C48.5344 31.4123 45.5139 32.3549 42.2777 32.4597Z\",\n    fill: \"#E84A6E\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M33.4316 36.9634C31.382 38.8487 29.3324 40.734 27.2827 42.6193C26.7434 43.143 26.0961 43.5619 25.4489 43.8762C24.2622 44.5046 23.2913 44.2951 22.3205 43.3525C22.1047 43.143 21.889 42.8288 21.7811 42.5146C19.6236 39.2676 17.8976 35.916 16.3873 32.3548C15.9558 31.2027 15.4165 30.0506 15.9558 28.8984C16.711 28.3748 17.574 28.4795 18.437 28.5842C20.8102 28.689 28.9009 30.1553 31.382 30.9932C31.7056 31.8311 32.0292 32.8785 32.3529 33.8212C32.6765 34.9733 33.0001 35.916 33.4316 36.9634Z\",\n    fill: \"#E84A6E\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M40.5521 34.6592C39.3655 35.6019 38.2868 35.9161 37.1001 36.1256C36.0214 36.3351 35.482 36.1256 35.0505 35.1829C34.7269 34.345 34.5111 33.5071 34.1875 32.6692C35.0505 31.2028 36.4529 30.6791 37.9631 30.3649C39.2576 31.517 39.4734 33.1929 40.5521 34.6592Z\",\n    fill: \"#E84A6E\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M33.4313 87.2385C29.0085 87.5527 25.8801 91.6376 26.6352 95.8271C26.9588 97.7124 28.0376 99.1788 29.44 100.121C30.6266 101.169 32.2447 101.797 33.8629 101.902C37.4227 102.216 40.4432 98.5503 40.9826 95.4081C41.4141 91.2186 37.9621 86.9243 33.4313 87.2385Z\",\n    fill: \"#FFC2BD\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M97.0779 78.6498C96.9701 77.9166 96.7543 77.2882 96.5386 76.7645C95.6755 73.6223 92.5472 71.6323 89.203 72.0512C85.4274 72.4702 81.7596 75.0887 81.9754 79.1735C82.1911 83.5726 86.8298 86.4006 91.0369 85.6674C94.1653 85.0389 97.5094 82.0015 97.0779 78.6498Z\",\n    fill: \"#FFC2BD\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M54.3596 117.298C52.9572 117.822 52.2021 118.66 51.3391 119.498C48.9658 121.802 46.4847 123.897 43.6799 125.678C41.4145 127.039 39.0413 127.877 36.4523 128.087C31.1664 128.506 25.9884 128.191 21.134 125.782C20.8104 125.573 20.3789 125.468 19.9474 125.363C19.5159 125.992 19.1922 126.515 18.7607 127.039C17.0347 129.134 14.9851 130.6 12.0725 130.915C11.641 130.915 11.2095 131.019 10.778 131.019C9.15984 130.915 8.29683 130.181 8.08108 128.715C7.97321 128.191 7.97321 127.772 7.97321 127.144C7.54171 127.039 7.00233 127.039 6.57083 126.934C6.13933 126.83 5.70783 126.83 5.3842 126.725C2.90307 126.201 2.25582 124.84 3.44245 122.64C3.6582 122.221 3.98183 121.802 4.30545 121.383C3.87395 121.069 3.44245 120.86 3.01095 120.65C1.28494 119.812 0.96132 118.66 1.5007 116.775C1.60857 116.146 2.04007 115.623 2.3637 114.889C2.14795 114.366 1.82432 113.842 1.60857 113.214C1.17707 112.061 1.06919 110.805 1.28495 109.652C1.5007 108.291 2.25582 107.662 3.6582 107.558C5.06058 107.453 6.24721 107.872 7.54171 108.291C8.72834 108.71 9.91496 109.129 10.9937 109.548C11.8567 109.129 11.7488 108.396 11.9646 107.872C12.504 106.51 13.367 105.463 14.7694 105.044C16.4954 104.52 17.8977 104.939 18.7607 106.51C19.1922 107.243 19.5159 108.186 19.7316 109.024C20.1631 111.538 20.5946 113.947 20.8104 116.461C21.0261 118.66 20.9182 120.964 21.0261 123.373C23.5072 124.944 26.312 125.782 29.3325 125.992C31.5979 126.097 33.8633 126.097 36.0208 126.097C38.0704 126.097 39.9043 125.468 41.7382 124.421C44.5429 122.85 47.0241 120.755 49.3973 118.555C50.3682 117.717 51.2312 116.67 52.2021 115.623C51.2312 115.099 50.1524 115.204 49.1815 114.994C48.1028 114.68 47.024 114.575 46.0532 114.366C44.9744 114.052 43.7878 113.737 42.709 113.423C41.6303 113.109 40.6594 112.69 39.6885 112.376C38.7177 111.957 37.6389 111.538 36.668 111.119C35.6971 110.7 34.7263 110.176 33.7554 109.652C32.7845 109.129 31.9215 108.605 30.9506 108.081C30.0876 107.558 29.1168 106.929 28.2537 106.301C27.2829 105.672 26.4199 104.939 25.5569 104.206C24.6939 103.578 23.9387 102.844 23.0757 102.111C22.3206 101.378 21.5655 100.645 20.8104 99.9117C15.5245 101.692 10.6701 100.854 6.2472 97.8169C2.47157 95.1985 0.74557 91.4279 0.96132 86.9241C1.17707 82.944 3.98183 80.2207 8.08108 79.9065C8.40471 79.9065 8.72833 79.9065 9.26771 79.8018C9.26771 79.3828 9.26771 78.9639 9.26771 78.6497C8.29683 71.8416 9.59134 65.4525 12.2882 59.2729C14.1221 54.9786 16.7111 51.1033 19.6237 47.5421C20.0552 47.0184 20.4867 46.4947 20.9182 45.8663C20.5946 45.3426 20.3789 44.7142 19.9474 44.1905C18.0056 41.153 16.2796 38.0109 14.8772 34.7639C14.4457 33.7165 14.0142 32.6691 13.6906 31.517C13.4748 30.8886 13.4748 30.2602 13.4748 29.6317C13.5827 27.9559 14.3378 27.118 16.0639 26.8038C16.9269 26.699 17.682 26.699 18.545 26.8038C20.9182 27.118 23.2915 27.5369 25.6648 27.8511C25.9884 27.8511 26.312 27.8512 26.9593 27.9559C26.4199 27.4322 26.0962 27.118 25.8805 26.699C24.2624 25.0232 22.5364 23.4521 21.134 21.6715C17.8977 17.5867 17.0347 12.8734 18.3292 7.95069C18.545 7.00804 19.0844 5.96065 19.7316 5.12274C20.9182 3.44691 22.86 3.23743 24.4781 4.59904C25.2332 5.22748 25.8805 5.96065 26.5277 6.69383C26.9592 7.11278 27.175 7.53174 27.7144 8.16018C27.9301 7.74122 28.1459 7.53174 28.2537 7.32226C28.4695 6.48435 28.5774 5.54169 28.901 4.70378C29.2246 3.76113 29.6561 2.92321 30.1955 2.0853C31.3821 0.51421 32.7845 0.51421 34.079 2.0853C34.4026 2.50426 34.6184 2.92322 35.0499 3.44691C35.3735 3.02795 35.5893 2.71374 35.9129 2.50426C37.0995 1.24739 38.5019 1.45687 39.3649 2.92322C39.7964 3.65639 40.12 4.38956 40.3358 5.12274C40.7673 7.21752 41.1988 9.20757 41.4145 11.3024C41.6303 12.9782 41.5224 14.654 41.5224 16.4346C41.5224 16.8535 41.6303 17.1677 41.6303 18.0057C42.1697 17.1677 42.4933 16.7488 42.8169 16.2251C43.572 15.1777 44.2193 14.0256 45.0823 13.0829C45.6217 12.4545 46.2689 11.9308 46.9162 11.5118C48.8579 10.255 51.0154 10.5692 52.5257 12.245C54.0359 13.9208 54.6832 16.0156 55.0068 18.2151C55.4383 21.881 55.5462 25.4421 55.1147 29.108C55.1147 29.3175 55.1147 29.6317 55.1147 29.9459C55.5462 29.9459 56.0856 30.0507 56.5171 30.0507C65.3628 29.4222 73.5614 31.6218 81.2205 35.7066C86.5064 38.6393 90.9293 42.6194 94.3813 47.4374C95.5679 49.1132 96.5388 50.8938 97.6175 52.5696C97.9412 52.9886 98.2648 53.5122 98.5884 54.0359C99.0199 53.617 99.4514 53.3028 99.775 52.9886C102.148 50.9985 105.061 50.8938 107.542 52.7791C109.484 54.2454 110.67 56.1307 111.102 58.435C111.426 60.2156 111.426 61.9961 111.102 63.7767C110.67 66.2904 109.915 68.8042 108.621 71.1084C106.787 74.5648 105.6 75.717 101.933 77.4975C101.717 78.126 101.609 78.9639 101.393 79.6971C99.6672 86.9241 96.7545 93.7321 92.3316 99.807C91.5765 100.854 90.7135 101.902 89.7426 102.844C86.1828 106.301 82.2992 109.338 77.7685 111.433C77.337 111.643 76.9055 111.957 76.474 112.166C76.3661 112.166 76.3661 112.271 76.2582 112.585C76.474 112.795 76.6897 113.109 77.0134 113.318C79.6024 115.308 82.2992 116.984 85.4276 118.032C89.8505 119.498 94.2734 119.498 98.5884 117.717C101.501 116.461 103.874 114.575 105.6 112.061C107.111 109.862 108.513 107.558 110.023 105.253C110.563 104.416 110.994 103.578 110.886 102.425C108.297 100.645 106.248 98.3406 104.414 95.8269C103.551 94.57 103.011 93.2084 103.227 91.7421C103.443 90.0662 104.953 88.9141 106.571 89.1236C107.003 89.2283 107.326 89.3331 107.758 89.5425C108.189 89.752 108.621 90.0662 109.16 90.3804C109.376 89.8568 109.484 89.4378 109.7 89.0189C110.131 87.8667 110.455 86.7146 110.994 85.6672C112.073 83.8866 114.015 83.7819 115.309 85.353C115.848 85.9814 116.172 86.8193 116.711 87.6572C117.251 87.4478 117.79 87.2383 118.33 87.1335C119.948 86.8193 121.35 87.5525 121.782 89.1236C121.997 89.8568 122.105 90.4852 122.321 91.3231C122.968 91.4278 123.615 91.4279 124.263 91.6373C125.989 92.0563 126.744 93.3132 126.097 94.989C125.881 95.5127 125.557 96.0364 125.341 96.5601C125.773 97.0838 126.312 97.5027 126.636 98.0264C127.283 99.1786 127.067 100.435 125.989 101.273C125.557 101.588 125.018 101.902 124.478 102.111C123.076 102.53 121.566 103.054 120.163 103.054C117.682 103.054 115.417 103.787 113.259 104.206C111.318 107.243 109.484 110.176 107.65 113.004C104.737 117.194 100.746 119.917 95.5679 120.964C92.1159 121.593 88.7718 121.383 85.4276 120.336C83.5938 119.707 81.8678 118.87 80.1417 118.136C79.6024 117.927 79.1709 117.613 78.6315 117.403C78.2 118.032 78.6315 118.451 78.8472 118.765C80.6811 122.326 82.6229 125.782 84.4568 129.343C88.556 137.094 91.6844 145.159 94.7049 153.329C95.6758 155.947 96.2152 158.566 96.323 161.394C96.323 164.117 95.0285 165.793 92.4395 166.735C91.2529 167.154 90.1741 167.573 88.8796 167.992C94.0576 173.439 104.306 177.838 110.778 177C110.886 176.476 111.102 175.848 111.318 175.219C112.289 171.763 113.799 168.516 116.28 165.793C116.927 165.059 117.79 164.536 118.545 163.907C118.869 163.698 119.3 163.488 119.624 163.279C121.997 162.336 124.263 162.755 124.586 166.002C124.694 167.259 124.478 168.411 124.047 169.563C122.645 173.334 120.271 176.371 117.035 178.78C116.28 179.304 115.309 179.723 114.338 180.037C113.475 180.351 112.72 180.351 112.073 179.618C111.641 179.095 111.102 179.095 110.563 179.095C105.169 179.095 100.207 177.733 95.5679 175.219C92.1159 173.334 88.9875 171.134 86.0749 168.411C77.0134 169.563 67.844 169.563 58.6746 168.935C57.8116 169.563 57.4879 170.401 57.2722 171.449C56.7328 173.858 56.1934 176.162 55.6541 178.571C54.6832 182.446 53.6044 186.426 52.6336 190.302C52.5257 190.825 52.4178 191.454 52.2021 192.082C52.7414 192.711 53.3887 193.339 53.4966 194.282C53.6044 195.015 54.0359 195.643 54.3596 196.272C55.2226 198.157 56.0856 200.147 56.9486 202.032C57.4879 203.289 57.7037 204.546 57.5958 205.803C57.3801 208.422 55.2226 209.678 52.7414 208.631C51.8784 208.212 51.0154 207.688 50.3682 206.955C47.7792 204.127 46.4847 200.776 46.9162 196.9C47.024 195.748 47.4555 194.701 48.5343 194.072C49.5052 193.549 49.8288 192.711 50.0446 191.663C51.5548 185.903 53.1729 180.247 54.3596 174.486C54.7911 172.496 55.3304 170.611 55.8698 168.516C55.4383 168.411 55.1147 168.202 54.6832 168.202C51.6627 167.573 48.6422 167.05 45.6217 166.316C43.2484 165.793 40.983 165.06 38.7177 164.326C38.2862 164.222 37.9625 164.012 37.6389 163.803C37.0995 163.488 36.8838 162.86 37.0995 162.336C37.3153 161.708 37.6389 161.184 37.9625 160.66C39.5807 157.937 41.0909 155.109 42.709 152.386C46.4847 145.892 48.9658 138.979 50.9076 131.857C52.0942 127.458 53.0651 123.059 54.1438 118.66C54.2517 118.241 54.2517 117.927 54.3596 117.298ZM41.5224 57.4923C41.1988 58.1208 40.8752 58.5397 40.5515 59.0634C39.0413 61.8914 37.6389 64.7193 36.1286 67.4426C35.4814 68.6994 34.6184 69.9563 33.4318 70.899C32.2451 71.8416 30.9506 72.2606 29.4404 71.6321C28.5774 71.3179 27.8223 70.7942 27.0671 70.3753C26.5277 69.9563 26.2041 69.4326 25.7726 69.0137C24.9096 69.6421 24.9096 70.48 24.586 71.2132C23.5072 74.1459 22.2127 76.8691 20.4867 79.4876C19.8395 80.535 18.9765 81.4776 18.1135 82.3155C17.1426 83.2582 15.956 83.7819 14.4457 83.4677C14.0142 83.3629 13.4748 83.3629 13.0433 83.3629C12.9355 83.6771 12.8276 83.8866 12.8276 83.9914C13.0433 84.7245 13.2591 85.353 13.5827 85.9814C16.4954 92.2658 20.9182 97.2932 25.9884 101.902C29.3325 104.939 33.216 107.348 37.4231 109.234C45.0823 112.69 53.0651 114.052 61.4793 113.423C64.1762 113.214 66.981 112.795 69.57 112.166C71.6196 111.747 73.7771 111.014 75.611 110.176C82.2992 107.034 88.0166 102.74 92.008 96.4553C93.0868 94.7795 93.9498 93.1037 94.8128 91.3231C98.1569 84.3056 100.314 77.1833 99.775 69.3279C99.4514 65.243 98.6963 61.3677 97.186 57.4923C97.0782 57.0734 96.7545 56.7592 96.4309 56.3402C95.3521 59.4824 93.8419 60.7393 90.8214 60.844C90.282 60.844 89.8505 60.844 89.3111 60.7393C87.2615 60.5298 85.4276 59.6919 83.9174 58.435C82.4071 57.2829 81.1126 55.9213 79.7102 54.6644C79.3866 54.4549 79.2787 53.9312 78.6315 54.2454C78.4157 54.7691 78.3079 55.3976 78.0921 56.026C77.4449 57.7018 75.9346 59.3777 73.2377 59.0634C72.3747 58.9587 71.6196 58.854 70.7566 58.6445C68.3833 58.016 66.3337 56.7592 64.6077 55.0833C64.0683 54.6644 63.529 54.1407 62.7738 53.5122C62.4502 54.4549 62.3423 55.0833 62.1266 55.8165C60.94 59.4824 58.5667 62.1009 55.0068 63.8814C52.2021 65.243 49.5052 65.0336 46.9162 63.3577C45.7295 62.6246 44.7587 61.5772 43.7878 60.6345C43.1405 59.5871 42.3854 58.5397 41.5224 57.4923ZM22.7521 46.4947C20.7025 49.3227 18.6529 52.0459 16.9269 54.8739C13.9063 59.6919 11.9646 64.9288 11.3173 70.5847C10.9937 73.308 11.2095 76.0312 11.5331 78.8591C11.641 79.4876 11.7488 80.116 12.3961 80.535C14.23 81.7918 16.2796 81.4776 17.682 79.8018C17.8977 79.4876 18.2214 79.1734 18.4371 78.8591C20.8104 74.9838 22.86 70.899 23.723 66.3952C23.8309 65.9762 23.8309 65.5573 23.9387 65.243C24.1545 64.5099 25.2332 64.1957 25.7726 64.9288C26.2041 65.4525 26.5278 66.1857 26.9593 66.8141C27.6065 67.7568 28.1459 68.8042 29.2246 69.4326C30.5191 70.1658 31.5979 70.1658 32.5688 69.0137C33.3239 68.1757 33.9711 67.2331 34.5105 66.1857C36.3444 62.834 38.0704 59.3777 39.7964 56.026C40.0122 55.5023 40.3358 54.9786 40.6594 54.5596C41.0909 54.0359 42.0618 54.0359 42.3854 54.5596C42.709 54.9786 42.9248 55.5023 43.2484 56.026C44.5429 58.1208 45.9453 60.1108 48.1028 61.5772C50.1524 62.9388 52.3099 63.0435 54.4674 61.9961C57.8116 60.3203 59.8612 57.7018 60.5084 54.1407C60.7242 52.9886 60.7242 51.9412 60.8321 50.789C60.8321 50.2653 60.8321 49.8464 60.94 49.3227C61.0478 48.799 61.9108 48.4848 62.3423 48.9037C62.5581 49.1132 62.7738 49.3227 62.9896 49.6369C63.529 50.3701 63.9605 51.208 64.4998 51.8364C66.6573 54.4549 69.2463 56.3402 72.6983 56.9686C74.8559 57.3876 76.0425 56.5497 76.474 54.4549C76.6897 53.3028 76.6897 52.1506 76.7976 51.1033C76.7976 50.6843 76.9055 50.2653 77.1212 49.9511C77.2291 49.5322 78.0921 49.3227 78.4157 49.6369C78.7394 49.8464 79.063 50.1606 79.2787 50.5796C80.4654 52.4649 81.9756 54.036 83.7016 55.5023C84.8883 56.5497 86.1828 57.3876 87.5851 58.1208C88.7718 58.7492 90.0663 58.9587 91.4686 58.854C93.0868 58.7492 93.8419 58.1208 94.1655 56.5497C94.3813 55.5023 94.4892 54.4549 94.7049 53.4075C94.8128 52.7791 94.7049 52.1506 94.3813 51.5222C90.8214 45.6568 85.8591 40.9436 79.7102 37.5919C72.4826 33.7165 64.7156 31.8312 56.4092 32.4597C54.6832 32.5644 52.9572 32.7739 51.2312 33.1928C48.5343 33.8213 45.9453 34.5545 43.1405 35.1829C42.709 36.4398 41.5224 37.1729 40.12 37.6966C38.9334 38.1156 37.7468 38.5345 36.5602 38.6393C35.805 38.744 35.1578 39.0582 34.5105 39.4772C33.8633 39.8962 33.216 40.5246 32.6766 41.0483C31.1664 42.4099 29.764 43.7715 28.3616 45.0284C26.7435 45.971 25.1254 46.8089 22.7521 46.4947ZM57.0564 115.623C56.8407 116.461 56.6249 117.089 56.5171 117.717C55.6541 122.85 54.2517 127.877 52.8493 132.8C51.2312 138.456 49.2894 144.112 46.5925 149.453C46.3768 149.768 46.161 150.187 46.0532 150.501C45.7295 151.234 45.8374 151.758 46.7004 152.072C47.7792 152.596 48.7501 153.119 49.9367 153.433C53.9281 154.376 57.9194 155.214 61.9108 155.947C66.2258 156.785 70.5408 156.471 74.8559 156.366C79.3866 156.366 83.8095 155.214 87.9088 153.538C89.3111 152.91 90.8214 152.281 91.5765 150.71C87.693 139.713 82.6229 129.343 76.9055 119.184C75.8267 117.194 74.8559 115.099 73.3456 113.214C68.0597 114.889 62.7738 115.413 57.0564 115.623ZM39.6885 162.232C40.12 162.441 40.5515 162.651 40.983 162.755C43.8957 163.488 46.7004 164.326 49.6131 164.955C55.7619 166.316 62.0187 167.259 68.3833 167.154C71.5117 167.154 74.748 167.05 77.8764 166.945C81.9756 166.84 85.967 166.107 89.9584 165.06C90.9293 164.745 91.7923 164.431 92.7631 163.907C93.5183 163.488 93.9498 162.86 94.0576 161.917C94.2734 159.089 93.8419 156.366 92.5474 153.538C92.1159 153.748 91.6844 153.852 91.3608 154.062C87.9088 156.052 84.1331 157.309 80.1417 157.937C75.9346 158.566 71.7275 158.566 67.4125 158.461C62.0187 158.356 56.8407 157.204 51.6627 155.947C49.5052 155.423 47.5634 154.795 45.6217 153.748C45.298 153.538 44.8665 153.433 44.5429 153.329C42.9248 155.947 40.3358 160.451 39.6885 162.232ZM38.7177 27.7464C39.4728 22.4047 39.4728 17.1677 39.257 11.9308C39.257 10.6739 39.0413 9.31231 38.8255 8.05544C38.6098 6.79857 38.5019 5.54169 37.6389 4.18008C37.4232 4.70378 37.0995 5.12274 36.9917 5.5417C36.668 6.37961 36.5601 7.32226 36.2365 8.05544C36.1286 8.36966 35.5893 8.57913 35.2656 8.57913C35.0499 8.57913 34.6184 8.36966 34.5105 8.05544C34.2948 7.74122 34.1869 7.32226 34.079 6.9033C33.7554 5.85591 33.4318 4.91326 33.0003 3.97061C32.8924 3.65639 32.5688 3.44691 32.2451 3.13269C31.49 4.07534 31.0585 4.91326 30.9506 5.85591C30.627 7.63648 30.4113 9.41704 30.1955 11.0929C30.0876 11.6166 30.1955 12.0355 30.0876 12.5592C29.9798 12.8734 29.6561 13.2924 29.3325 13.3971C29.0089 13.5019 28.4695 13.2924 28.2537 13.0829C27.9301 12.664 27.7144 12.1403 27.3908 11.6166C26.7435 10.4644 26.0962 9.20757 25.3411 8.05544C24.8017 7.32226 24.1545 6.69383 23.5072 6.06539C22.86 5.43696 21.997 5.64643 21.5655 6.3796C21.134 7.11278 20.8104 7.84596 20.5946 8.57913C19.7316 12.245 20.1631 15.8061 22.3206 19.0531C25.2332 23.5568 29.4404 26.699 33.9711 29.4222C35.5893 28.7938 37.2074 28.2701 38.7177 27.7464ZM5.16845 124.211C6.35508 124.735 7.32596 124.63 8.40471 124.211C8.83621 124.002 9.26771 123.688 9.69921 123.478C10.3465 123.164 11.1016 123.792 10.9937 124.525C10.8858 124.944 10.6701 125.468 10.5622 125.887C10.3465 126.83 10.0228 127.772 10.6701 128.61C14.0142 128.61 16.2796 127.249 17.4662 124.316C18.6529 121.488 19.1922 118.66 18.4371 115.623C18.3292 115.099 18.4371 114.47 18.3292 113.947C18.1135 112.271 17.7899 110.595 17.4662 108.919C17.3584 108.5 17.1426 107.977 16.9269 107.558C16.4954 106.825 15.7402 106.615 14.9851 107.034C14.3378 107.348 13.9063 107.872 13.9063 108.605C13.7985 109.338 13.9063 110.071 14.0142 110.805C14.0142 111.224 14.23 111.747 14.23 112.166C14.23 112.69 14.0142 113.109 13.4748 113.318C12.9355 113.528 12.504 113.318 12.1803 112.899C11.7488 112.376 11.3173 111.957 10.6701 111.747C9.26771 111.224 7.86533 110.595 6.46296 110.176C5.59995 109.862 4.62908 109.443 3.6582 109.757C3.2267 112.271 3.55032 113.004 5.3842 114.052C5.59995 114.156 5.8157 114.261 6.03145 114.366C6.6787 114.785 7.00233 115.204 6.78658 115.727C6.57083 116.251 6.13933 116.461 5.59995 116.461C5.16845 116.461 4.73695 116.461 4.41332 116.461C3.87395 116.565 3.55032 116.984 3.44245 117.508C3.33457 118.032 3.6582 118.451 4.19758 118.66C4.84483 118.87 5.49208 119.079 6.13933 119.184C6.67871 119.288 7.32596 119.393 7.86533 119.603C8.51258 119.812 8.72833 120.755 8.18896 121.174C7.86533 121.488 7.32596 121.697 7.00233 122.012C6.24721 122.535 5.3842 122.954 5.16845 124.211ZM42.2775 32.4597C45.5138 32.3549 48.5343 31.4123 51.4469 30.4696C52.5257 30.1554 52.7414 29.4222 52.8493 28.3748C53.0651 25.0232 53.0651 21.7763 52.7414 18.4246C52.5257 16.7488 52.0942 15.073 51.0154 13.7113C50.0446 12.4545 48.9658 12.245 47.7792 13.1877C46.8083 13.9208 46.0532 14.8635 45.298 15.9109C43.572 18.4246 42.3854 21.1478 41.6303 24.0805C41.1988 25.7564 40.8752 27.4322 40.8752 29.108C40.983 30.3649 41.1988 31.4123 42.2775 32.4597ZM33.4318 36.9635C33.1081 35.9161 32.6766 34.9734 32.353 33.926C32.0294 32.9834 31.7058 31.936 31.3821 31.0981C28.901 30.2602 20.8104 28.6891 18.4371 28.6891C17.5741 28.6891 16.819 28.4796 15.956 29.0033C15.4166 30.2602 15.956 31.3075 16.3875 32.4597C17.7899 36.0208 19.6237 39.3725 21.7812 42.6194C21.997 42.9336 22.1049 43.1431 22.3206 43.4573C23.1836 44.5047 24.2624 44.7142 25.449 43.981C26.0962 43.6668 26.7435 43.1431 27.2829 42.7241C29.3325 40.8388 31.3821 38.8488 33.4318 36.9635ZM19.1922 97.9217C18.545 97.0838 18.1135 96.4553 17.682 95.9316C15.3087 92.9989 13.2591 89.8568 11.7488 86.4004C11.3173 85.4577 10.9937 84.4103 10.5622 83.4677C9.91496 82.0013 8.72833 81.4776 7.11021 81.8966C5.16845 82.525 3.76608 83.6771 3.44245 85.7719C2.7952 89.8568 4.30545 93.1037 7.43383 95.7222C10.3465 98.1312 13.9063 98.5501 17.5741 98.4454C17.8977 98.4454 18.3292 98.1312 19.1922 97.9217ZM113.152 86.5051C112.936 86.8193 112.612 87.2383 112.396 87.6572C111.749 89.3331 111.533 91.1136 111.533 92.8942C111.533 93.5226 111.533 94.2558 110.778 94.57C109.807 94.8842 109.484 94.1511 109.052 93.6274C108.405 92.8942 107.758 92.161 107.003 91.5326C106.787 91.3231 106.248 91.4278 105.924 91.5326C105.708 91.6373 105.492 92.0563 105.492 92.3705C105.492 93.3132 105.816 94.1511 106.463 94.7795C107.758 96.3506 109.16 97.8169 110.563 99.388C111.965 100.959 113.799 101.273 115.741 101.064C116.711 100.959 117.682 100.959 118.653 100.959C120.487 100.959 122.321 100.645 123.939 99.9117C124.263 99.807 124.478 99.4928 124.91 99.0738C124.478 98.6549 124.155 98.3406 123.831 98.2359C123.4 98.0264 122.968 97.8169 122.429 97.6075C121.458 97.0838 121.35 96.2459 122.321 95.5127C122.645 95.3032 123.076 95.0937 123.4 94.8842C123.723 94.6748 124.047 94.3605 123.831 93.7321C123.508 93.6274 123.184 93.5226 122.752 93.5226C121.782 93.5226 121.134 94.2558 120.379 94.7795C120.163 94.989 119.516 94.989 119.3 94.7795C118.977 94.57 118.869 94.1511 118.869 93.7321C118.869 93.3132 119.193 92.9989 119.3 92.58C119.516 91.8468 119.732 91.0089 119.84 90.2757C119.84 89.9615 119.624 89.4378 119.3 89.2283C118.869 88.9141 118.33 89.1236 118.006 89.5425C117.467 90.0662 117.143 90.6947 116.711 91.3231C116.28 91.9515 116.064 92.6847 115.093 92.58C114.446 92.4752 114.23 91.9516 114.23 90.5899C114.23 89.6473 114.23 88.7046 114.122 87.6572C114.338 87.1335 114.122 86.6098 113.152 86.5051ZM102.364 74.8791C103.119 74.3554 103.551 74.2506 103.766 73.9364C104.306 73.5174 104.737 73.0985 105.169 72.5748C107.974 68.5947 109.484 64.1957 109.052 59.3777C108.837 57.2829 107.758 55.607 106.032 54.2454C104.629 53.198 102.688 53.4075 101.609 54.2454C100.314 55.2928 99.4514 56.5497 100.099 58.2255C100.207 58.435 100.314 58.6445 100.314 58.9587C101.717 63.253 102.256 67.652 102.256 72.0511C102.256 72.7843 102.364 73.6222 102.364 74.8791ZM122.105 164.85C121.674 164.85 121.242 164.745 120.919 164.955C119.948 165.478 118.977 166.002 118.33 166.735C115.848 169.144 114.446 172.182 113.583 175.324C113.367 176.267 113.583 177 114.23 177.628C114.446 177.523 114.662 177.523 114.77 177.523C118.545 175.429 120.919 172.182 122.321 168.202C122.645 167.154 122.752 166.002 122.105 164.85ZM51.3391 195.015C49.5052 195.434 48.8579 196.481 48.9658 198.052C49.0737 200.776 50.0446 203.289 51.8784 205.279C52.4178 205.908 53.0651 206.431 53.9281 206.536C54.6832 206.746 55.2226 206.327 55.4383 205.594C55.6541 204.651 55.4383 203.708 55.0068 202.766C54.2517 201.09 53.4966 199.309 52.7414 197.633C52.3099 196.795 51.7706 195.958 51.3391 195.015ZM40.5515 34.6592C39.4728 33.1928 39.257 31.517 38.0704 30.3649C36.5602 30.6791 35.1578 31.2028 34.2948 32.6692C34.5105 33.5071 34.8341 34.345 35.1578 35.1829C35.5893 36.1255 36.1286 36.335 37.2074 36.1255C38.2862 35.9161 39.3649 35.4971 40.5515 34.6592Z\",\n    fill: \"#1D262D\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M67.5201 89.9617C67.5201 89.1237 67.3044 88.3906 67.4122 87.5526C67.4122 87.2384 67.8437 86.9242 68.1674 86.7147C68.491 86.5052 69.2461 86.9242 69.354 87.3432C69.7855 89.5427 70.217 91.847 69.5697 94.0465C68.491 97.5029 64.7154 99.5977 61.1555 98.7598C57.3798 97.8172 55.2223 95.3034 55.0066 91.5328C55.0066 91.2185 55.0066 90.9043 55.1145 90.5901C55.2223 89.9617 55.8696 89.5427 56.409 89.6474C56.9483 89.7522 57.1641 90.1711 57.272 90.6948C57.3798 91.6375 57.4877 92.5802 57.8113 93.5228C58.5665 95.9318 61.4791 97.3982 63.9602 96.8745C65.5784 96.5603 67.4122 94.5702 67.628 92.9991C67.628 91.9517 67.5201 90.9043 67.5201 89.9617Z\",\n    fill: \"#1D262D\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M45.2981 85.5625C45.2981 87.4478 43.572 89.019 41.6303 89.019C39.7964 89.019 38.394 87.5526 38.394 85.772C38.394 83.8866 39.9043 82.525 41.9539 82.6297C44.1114 82.525 45.2981 83.6772 45.2981 85.5625Z\",\n    fill: \"#1D262D\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M81.2204 75.0886C81.1126 77.4977 78.3078 79.1735 76.1503 78.1261C74.8558 77.4976 74.1007 76.0313 74.5322 74.6697C75.0715 72.7844 77.5527 71.4227 79.4944 72.1559C80.5732 72.4701 81.3283 73.727 81.2204 75.0886Z\",\n    fill: \"#1D262D\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGirl2);\nexport default __webpack_public_path__ + \"static/media/girl2.e1d2c4de566bfabfc1bf0b16dc0e762a.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgBoy2(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 170,\n    height: 190,\n    viewBox: \"0 0 170 190\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M76.7406 45.8803C77.5037 46.2519 78.1985 46.5126 78.7826 46.8414C84.3666 49.2167 89.8612 51.5705 95.4452 53.9457C99.0556 55.4708 102.666 56.9959 106.277 58.521C112.108 61.05 118.219 62.7938 124.368 63.9786C126.716 64.4447 129.148 64.5524 131.734 64.4127C131.718 64.8821 131.723 65.262 131.638 65.6204C131.394 67.4555 130.97 69.2478 131.105 71.0787C131.183 71.9494 131.261 72.82 131.539 73.6438C131.843 74.7578 132.522 75.4879 133.838 75.5183C134.038 75.4715 134.196 75.6038 134.575 75.5997C134.717 76.2015 134.858 76.8034 135.089 77.4266C135.598 78.8735 136.434 79.736 138.083 79.5617C138.193 79.4934 138.351 79.6258 138.53 79.6686C138.62 79.6899 138.62 79.69 138.777 79.8223C138.354 81.6146 137.684 83.2532 136.813 84.9386C133.694 90.5366 129.151 94.5635 123.545 97.4846C119.003 99.9025 114.063 100.805 108.998 100.637C102.616 100.438 96.4249 99.4321 90.4617 97.061C87.5932 95.9971 84.9623 94.3273 82.7058 92.2736C80.991 90.7279 79.4763 89.1354 78.004 87.3637C74.8804 83.7774 72.9528 79.5302 71.8893 74.8267C70.8941 70.2341 70.3887 65.5692 70.8418 60.8492C71.2899 55.7494 73.0381 51.1495 75.9969 47.0281C76.0815 46.6696 76.3452 46.3539 76.7406 45.8803ZM95.8964 73.6502C94.5329 73.4192 92.722 73.0813 90.8687 72.9226C89.7736 72.7557 89.331 73.0287 89.2771 74.0572C89.0751 75.713 88.852 77.4584 89.0291 79.1101C89.4238 83.8433 92.7005 87.182 97.3231 87.6236C99.4449 87.8464 101.199 87.224 102.202 85.3807C103.489 83.1322 104.619 80.7512 105.659 78.3489C106.028 77.5851 105.639 76.8296 104.787 76.4366C104.629 76.3042 104.361 76.2401 104.182 76.1973C101.629 75.3982 98.9863 74.5776 95.8964 73.6502ZM84.6385 60.074C82.891 59.4672 80.2141 61.1946 80.4269 63.8962C80.5828 65.6375 81.6664 66.6537 83.4254 66.4111C84.0258 66.2706 84.6474 66.0404 85.269 65.8102C86.5334 65.2601 87.1877 64.0911 87.126 62.7509C86.9537 61.4791 85.9808 60.3946 84.6385 60.074ZM116.271 76.245C117.972 76.6512 119.879 75.7814 120.328 74.2793C120.714 73.0461 119.573 71.0696 118.342 70.6807C116.573 70.1636 114.666 71.0334 114.396 72.5782C113.951 74.4601 114.592 75.7493 116.271 76.245Z\",\n    fill: \"#FFEAE3\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M77.8756 129.8C77.5291 128.865 77.7879 128.169 78.0256 127.563C79.6375 122.74 81.181 117.805 82.7929 112.982C84.1035 109.034 85.5249 105.018 86.8355 101.07C87.1367 100.195 87.4379 99.3195 87.7179 98.5342C88.561 98.1674 89.2136 98.6074 89.819 98.8467C93.8093 100.368 97.9478 101.262 102.239 101.908C104.34 102.221 106.505 102.265 108.627 102.487C108.806 102.53 109.075 102.594 109.343 102.658C109.485 103.26 109.626 103.862 109.768 104.464C110.192 106.27 110.527 108.055 110.952 109.861C111.548 112.939 112.145 116.017 112.653 119.074C113.186 122.421 113.698 125.857 114.142 129.183C114.314 130.455 114.487 131.727 114.569 132.978C114.647 133.849 114.073 134.28 113.293 134.378C113.093 134.425 112.914 134.382 112.624 134.407C108.222 133.829 103.809 134.101 99.4535 133.723C95.367 133.41 91.2805 133.096 87.1468 132.582C84.9352 132.338 82.8081 131.735 80.6811 131.133C79.8072 130.829 78.9073 130.235 77.8756 129.8ZM97.4955 123.597C97.969 123.994 98.4425 124.391 99.0056 124.81C99.816 125.382 100.605 126.044 101.437 126.527C102.021 126.856 102.716 127.116 103.432 127.287C104.527 127.454 105.212 126.955 105.198 125.815C105.183 124.676 105.058 123.604 104.865 122.421C104.74 121.35 104.504 120.347 104.447 119.386C104.711 119.07 104.864 118.823 105.017 118.575C105.94 117.47 106.973 116.296 107.896 115.191C108.708 114.154 108.678 113.484 107.641 112.668C106.852 112.006 105.909 111.592 104.993 111.468C103.83 111.19 102.645 111.001 101.371 110.792C101.114 109.878 100.767 108.943 100.531 107.94C100.321 107.227 100.112 106.514 99.7699 105.959C99.1288 104.669 98.0547 104.412 96.974 105.385C96.4889 105.838 95.9827 106.38 95.566 106.943C94.8221 108.091 94.057 109.329 93.292 110.566C92.4229 110.643 91.5326 110.809 90.5529 110.954C89.5731 111.098 88.5934 111.243 87.6136 111.388C87.1237 111.46 86.6339 111.532 86.2123 111.716C85.4588 112.104 84.7572 113.073 85.4406 114.183C86.2818 115.426 87.2549 116.51 88.56 117.39C89.2125 117.83 89.9334 118.381 90.4964 118.8C90.4002 120.008 90.1462 121.083 90.1819 122.134C90.1492 123.073 90.1848 124.123 90.4207 125.126C90.7297 126.62 92.0511 127.031 93.3793 126.212C93.7113 126.007 93.9538 125.781 94.1963 125.555C95.0557 124.718 96.1625 124.036 97.4955 123.597Z\",\n    fill: \"#9AD1E8\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M131.723 62.0968C129.901 62.6077 128.449 62.3555 126.954 62.2824C122.801 61.8586 118.728 60.6971 114.745 59.5569C110.246 58.1991 105.985 56.2359 101.681 54.4518C95.2252 51.7756 88.859 49.1208 82.4245 46.3551C80.8777 45.702 79.3944 44.7804 77.8687 44.0379C77.532 43.8629 77.1953 43.6879 76.927 43.6239C74.5067 42.6677 72.3923 41.2171 70.5203 39.5406C69.8892 39.0116 69.39 38.3249 68.9119 37.5487C67.6141 35.4417 68.8703 32.5257 71.3395 32.0748C72.4294 31.8621 73.5876 31.7602 74.7505 32.0379C79.3554 32.948 83.9602 33.8581 88.2005 35.9109C90.1523 36.8497 91.8617 38.0145 93.8346 38.8639C103.594 43.5583 112.72 49.3312 121.714 55.2618C124.66 57.1946 127.584 59.2169 130.508 61.2392C130.777 61.3033 131.092 61.5678 131.723 62.0968Z\",\n    fill: \"#9AD1E8\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M122.22 33.1205C123.283 34.2265 124.145 35.3793 125.203 36.1053C126.26 36.8314 127.513 37.1307 128.724 37.6093C129.139 38.6552 128.953 39.8417 128.968 40.9813C128.931 45.1387 128.268 49.1463 127.405 53.2009C127.067 54.6349 127.067 54.6349 126.233 55.7614C123.56 54.2706 121.061 52.4427 118.43 50.7727C115.799 49.1027 113.167 47.4327 110.515 45.8523C107.884 44.1823 105.232 42.6019 102.49 41.0001C102.77 40.2149 103.434 39.8054 104.077 39.4855C105.494 38.688 106.912 37.8904 108.377 37.2934C112.37 35.5963 116.505 34.5011 120.751 33.3376C121.241 33.2652 121.731 33.1929 122.22 33.1205Z\",\n    fill: \"#E87768\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M113.092 136.345C114.855 141.686 115.35 145.589 114.537 148.233C113.11 148.271 111.726 148.129 110.384 147.809C109.489 147.595 108.858 147.066 108.58 146.243C108.302 145.419 108.113 144.617 107.835 143.794C107.373 142.548 106.89 141.392 106.497 140.258C106.129 139.413 105.477 138.973 104.561 138.849C103.177 138.708 101.703 138.545 100.319 138.404C97.4604 138.1 94.4917 137.864 91.6335 137.56C91.2545 137.564 90.8966 137.479 90.6282 137.415C88.886 137.188 87.443 137.695 86.3463 139.136C85.3815 140.419 84.1694 141.549 83.1151 142.811C82.435 143.69 81.524 143.945 80.4292 143.778C78.1713 143.334 75.8875 142.599 73.6883 141.506C75.4342 138.517 77.1589 135.617 78.926 132.539C79.3734 132.645 79.8419 132.663 80.268 132.859C84.2306 134.089 88.2519 134.671 92.4261 135.005C97.3372 135.421 102.359 135.769 107.265 135.805C109.139 135.874 111.06 136.143 113.092 136.345Z\",\n    fill: \"#5C7CB3\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M128.258 57.0928C129.11 53.8863 129.873 50.6583 130.345 47.4559C130.797 44.3431 130.8 41.1234 130.915 37.8354C137.269 42.5737 142.525 57.5642 140.992 66.8598C140.723 66.7956 140.455 66.7314 140.297 66.599C136.686 63.4632 132.854 60.4639 128.869 57.7123C128.711 57.5798 128.574 57.3577 128.258 57.0928Z\",\n    fill: \"#5C7CB3\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M100.415 39.8391C95.6842 37.8575 91.6645 35.6671 90.355 34.408C90.7081 34.1137 90.9505 33.8877 91.2824 33.6831C94.6699 31.7475 98.3306 30.2558 102.18 29.5662C103.27 29.3534 104.36 29.1405 105.471 28.838C107.894 28.1863 110.326 28.294 112.695 28.6704C115.063 29.0469 117.369 29.692 119.785 30.269C120.321 30.3972 120.816 30.7046 121.579 31.0761C120.957 31.3063 120.536 31.4895 120.225 31.6046C116.67 32.6484 113.115 33.6922 109.629 34.8469C106.453 35.8866 103.461 37.3487 100.858 39.5662C100.726 39.724 100.615 39.7922 100.415 39.8391Z\",\n    fill: \"#5C7CB3\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M50.9073 74.5046C51.3597 74.9915 51.7649 75.2777 52.1277 75.7431C53.1268 77.1181 54.1259 78.4931 54.6822 80.1411C54.7977 80.4528 54.8449 80.6534 54.9604 80.9651C55.2126 81.4988 55.5966 81.8746 56.2655 81.845C56.8448 81.794 57.1085 81.4782 57.3251 80.9618C57.6734 80.2875 57.8216 79.66 58.2383 79.0967C58.655 78.5334 59.2296 78.1025 59.7146 77.6502C59.936 77.5137 60.2045 77.5778 60.6048 77.4841C60.7203 77.7957 60.9254 78.1288 61.0197 78.5301C61.218 80.0926 61.0583 81.5695 60.2721 82.8968C59.507 84.1344 58.6053 85.15 57.7507 86.3663C57.5977 86.6138 57.3551 86.84 57.0655 86.8655C56.0174 86.8992 55.5583 87.6418 54.8308 88.3202C53.4863 89.6088 51.8002 90.3424 49.909 90.7428C49.6193 90.7683 49.3085 90.8835 49.04 90.8193C47.4077 90.5241 45.6647 90.2971 44.1546 89.0841C44.4183 88.7683 44.6137 88.3415 44.9457 88.1368C45.2989 87.8424 45.8783 87.7914 46.2315 87.497C46.4528 87.3605 46.5375 87.0019 46.4904 86.8013C46.4432 86.6006 46.2382 86.2676 45.9696 86.2034C45.6328 86.0283 45.2536 86.0324 44.9851 85.9682C43.9793 85.8227 43.1689 85.2503 42.3797 84.5883C41.7695 83.9691 41.9389 83.252 42.6925 82.8638C43.1352 82.5908 43.6039 82.6081 44.1197 82.826C44.4566 83.0012 44.8618 83.2874 45.1986 83.4625C45.625 83.6591 46.0042 83.655 46.3786 83.2709C46.7529 82.8869 46.6586 82.4856 46.3641 82.1311C46.0224 81.576 45.6595 81.1106 45.4285 80.4872C45.2918 80.2652 45.3765 79.9067 45.5084 79.7488C45.6402 79.5909 46.1089 79.6082 46.2879 79.6509C47.1407 80.044 47.8615 80.595 48.6931 81.0777C48.9404 81.2315 49.4091 81.2488 49.6517 81.0226C49.873 80.8861 50.0683 80.4593 50.0423 80.169C49.9903 79.5884 49.717 79.1444 49.5755 78.5424C49.3983 76.8903 49.6947 75.6354 50.9073 74.5046Z\",\n    fill: \"#FFEAE3\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M123.643 129.258C123.629 128.119 124.335 127.53 125.042 126.941C125.395 126.647 125.838 126.374 126.28 126.101C127.097 125.444 126.93 124.551 125.898 124.116C125.382 123.898 124.824 123.859 124.308 123.641C124.04 123.577 123.682 123.491 123.545 123.269C123.34 122.936 123.156 122.514 123.151 122.134C123.215 121.865 123.5 121.459 123.789 121.434C124.501 121.225 125.191 121.106 125.859 121.076C127.576 121.013 129.277 121.419 130.782 122.252C132.129 122.953 133.26 124.17 133.748 125.707C134.142 126.842 134.646 127.91 135.019 129.135C135.533 130.962 135.668 132.793 135.044 134.633C135.002 134.812 134.67 135.017 134.38 135.042C134.269 135.111 133.954 134.846 133.907 134.645C133.744 134.133 133.602 133.531 133.44 133.019C132.281 133.121 132.095 134.307 131.231 134.764C130.673 134.725 130.51 134.213 130.326 133.79C130.143 133.367 130.138 132.987 129.954 132.565C129.702 132.031 128.986 131.86 128.522 132.223C128.058 132.585 127.684 132.969 127.22 133.332C126.998 133.468 126.619 133.473 126.461 133.34C126.304 133.208 126.209 132.807 126.252 132.627C126.51 131.932 126.88 131.168 127.139 130.472C127.419 129.687 126.809 129.067 126.029 129.165C125.718 129.28 125.318 129.374 125.007 129.489C124.717 129.515 124.407 129.63 124.138 129.566C124.091 129.365 123.912 129.322 123.643 129.258Z\",\n    fill: \"#FFEAE3\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M135.651 90.1301C135.714 89.8611 135.778 89.5922 135.91 89.4342C138.083 86.6383 139.562 83.5817 140.546 80.2173C140.889 79.1628 141.506 78.5524 142.529 78.2284C143.773 77.7677 144.974 77.4864 146.228 77.7858C147.123 77.9997 147.754 78.5294 147.922 79.4219C148.299 81.0276 148.14 82.5049 147.422 83.9436C146.117 86.663 143.839 88.2975 141.22 89.3767C139.665 89.9525 138.063 90.3276 136.456 90.3226C136.256 90.3695 136.009 90.2157 135.651 90.1301Z\",\n    fill: \"#FFEAE3\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M68.5423 65.1436C68.0684 64.7462 67.6417 64.5495 67.4365 64.2163C64.6207 60.5121 63.4078 56.4328 64.4884 51.8589C64.7003 50.9621 65.0017 50.0867 65.3927 49.2326C66.328 47.2769 68.4586 46.2698 70.2763 46.9881C70.7926 47.2061 71.2878 47.5139 71.6509 47.9796C72.1037 48.4667 72.2453 49.0689 71.8966 49.7436C71.5056 50.5976 71.1146 51.4517 70.7447 52.2161C69.3761 55.2052 68.9716 58.5194 68.678 61.7652C68.7137 62.8159 68.6386 63.9349 68.5423 65.1436Z\",\n    fill: \"#FFEAE3\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M133.531 73.1395C132.496 70.7136 132.875 67.1099 134.221 64.2111C134.469 64.3649 134.737 64.4291 134.985 64.5829C136.632 66.0183 138.279 67.4538 140.016 68.9106C140.716 69.5514 140.926 70.2645 140.714 71.1612C140.397 72.5061 140.147 73.9621 139.83 75.307C139.533 76.5623 138.763 77.4203 137.404 77.5691C136.546 76.7959 136.51 75.7454 136.453 74.7847C136.354 74.0032 136.434 73.2645 136.245 72.4617C136.146 71.6802 135.182 71.3553 134.655 71.987C134.412 72.2132 134.349 72.4822 134.127 72.6188C133.995 72.7767 133.774 72.9132 133.531 73.1395Z\",\n    fill: \"#976B47\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M67.7206 158.777C67.3838 158.602 67.0258 158.517 66.7785 158.363C65.1791 157.129 63.3161 156.21 61.4743 155.202C60.6428 154.72 59.9009 154.258 59.2013 153.618C58.2755 152.734 58.1552 152.043 58.6094 150.92C59.153 149.819 60.1489 149.205 61.3547 149.304C62.4498 149.471 63.413 149.796 64.2704 150.569C66.2326 152.268 67.3095 154.513 68.0756 156.874C68.3065 157.497 68.3374 158.167 67.7206 158.777Z\",\n    fill: \"#63B57A\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M123.865 155.857C124.587 156.408 124.976 157.165 124.964 158.015C125.045 160.876 124.094 163.302 122.267 165.424C122.157 165.492 122.025 165.65 121.914 165.718C121.45 166.081 120.985 166.444 120.379 166.205C119.774 165.965 119.832 165.316 119.78 164.735C119.775 164.355 119.86 163.996 119.924 163.727C120.385 161.374 121.294 159.128 122.541 157.057C122.958 156.493 123.174 155.976 123.865 155.857Z\",\n    fill: \"#63B57A\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M128.119 35.3623C126.666 35.11 125.609 34.3842 124.857 33.1635C124.563 32.8093 124.468 32.4081 124.753 32.0029C125.038 31.5977 125.438 31.504 125.907 31.5212C126.444 31.6495 126.981 31.7777 127.496 31.9955C128.685 32.5635 129.611 33.4471 130.315 34.4672C130.452 34.6891 130.478 34.9793 130.325 35.2267C130.283 35.4059 129.972 35.521 129.793 35.4782C129.214 35.5292 128.656 35.4905 128.119 35.3623Z\",\n    fill: \"#FFD16F\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M103.489 77.9357C103.494 78.3156 103.541 78.5162 103.409 78.6741C102.628 80.3811 101.868 81.9984 100.997 83.684C100.105 85.4592 98.7509 85.9879 96.8079 85.8078C94.507 85.5422 92.9076 84.308 91.7672 82.3314C90.5112 80.0431 90.4139 77.6528 91.1384 74.9855C91.8756 75.0669 92.5444 75.0373 93.2815 75.1187C96.8142 75.7732 100.13 76.9441 103.489 77.9357Z\",\n    fill: \"#FF9DA2\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M106.3 113.958C105.224 115.311 104.39 116.438 103.489 117.453C102.608 118.379 102.375 119.365 102.658 120.569C102.962 121.684 103.066 122.845 103.192 123.917C103.196 124.297 103.18 124.766 103.164 125.236C102.158 125.09 101.548 124.471 100.916 123.941C100.195 123.39 99.4956 122.75 98.7958 122.109C98.4118 121.733 97.9642 121.626 97.4531 121.788C96.8314 122.018 96.1201 122.227 95.4772 122.547C94.4127 123.051 93.4638 123.866 92.2415 124.236C91.7534 122.699 91.9603 121.423 92.3674 120.1C92.9861 117.88 92.7176 117.816 91.0072 116.65C89.7704 115.881 88.4441 115.091 87.6452 113.669C87.8877 113.442 88.0407 113.195 88.3304 113.169C90.0215 112.816 91.6442 112.351 93.3661 112.668C94.3719 112.813 94.4825 112.745 95.0051 111.734C95.6807 110.474 96.3563 109.215 97.1003 108.067C97.3852 107.662 97.7595 107.278 98.0232 106.962C98.7441 107.513 98.6643 108.251 98.8953 108.875C99.289 110.011 99.6827 111.146 100.166 112.303C100.465 113.038 100.892 113.234 101.714 112.957C103.247 112.471 104.594 113.172 106.3 113.958Z\",\n    fill: \"#FFC700\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M80.4247 64.0031C78.796 60.4889 74.0027 60.7643 71.556 63.1157C68.6032 66.009 69.9125 72.4774 74.3151 73.0556C76.4374 73.2785 78.3451 72.4084 79.5318 70.9872C81.7195 69.3317 81.4123 66.2278 80.4247 64.0031Z\",\n    fill: \"#FFC2BD\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M128.339 79.1163C127.814 78.1385 126.978 77.2759 126.056 76.7717C122.909 74.8836 118.694 76.7174 116.968 79.6196C114.847 82.9954 117.67 87.4576 120.681 89.1237C123.939 90.9437 127.865 89.1353 129.769 86.2759C131.299 83.8006 130.26 80.9955 128.339 79.1163Z\",\n    fill: \"#FFC2BD\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M123.526 125.542C123.032 125.235 122.606 125.038 122.29 124.773C121.254 123.958 120.86 122.822 121.157 121.566C121.454 120.311 122.271 119.653 123.472 119.371C125.964 118.829 128.244 119.184 130.597 120.03C131.292 120.29 131.897 120.529 132.481 120.858C133.235 120.47 133.294 119.821 133.353 119.171C133.411 118.522 133.381 117.852 132.929 117.365C132.272 116.545 131.615 115.725 130.847 114.973C128.049 112.411 124.966 110.254 121.751 108.255C118.784 106.41 115.774 104.745 112.674 103.057C112.337 102.882 111.89 102.776 111.285 102.536C111.358 103.027 111.273 103.386 111.299 103.677C111.633 105.462 111.899 107.136 112.323 108.942C113.124 112.354 113.835 115.745 114.257 119.161C114.652 122.287 115.116 125.524 115.601 128.672C115.726 129.744 115.851 130.816 116.086 131.819C116.258 133.092 116.23 134.411 115.328 135.428C114.821 135.97 114.963 136.572 115.083 137.264C115.554 139.271 116.025 141.278 116.296 143.332C116.493 144.895 116.47 146.595 116.467 148.205C116.465 149.815 115.89 150.246 114.173 150.31C113.794 150.314 113.504 150.34 113.215 150.365C113.083 150.523 112.951 150.681 113.019 150.792C113.106 152.424 113.104 154.034 113.281 155.686C113.431 157.049 114.173 157.51 115.596 157.092C116.507 156.835 117.461 156.4 118.415 155.964C119.769 155.435 121.034 154.884 122.299 154.333C123.453 153.851 124.59 153.838 125.78 154.406C127.591 158.344 126.743 161.931 124.689 165.42C124.055 166.5 123.285 167.358 122.199 167.952C120.249 169.002 118.476 168.105 118.047 165.919C117.854 164.736 117.951 163.527 118.427 162.315C118.987 160.743 119.437 159.24 120.04 157.489C119.661 157.493 119.371 157.519 119.06 157.634C118.038 157.959 117.063 158.484 116.041 158.808C113.507 159.53 111.844 158.565 111.432 155.908C111.213 154.435 111.194 152.915 111.064 151.463C111.06 151.083 110.987 150.592 110.914 150.1C110.398 149.883 109.882 149.665 109.345 149.537C108.003 149.216 107.077 148.332 106.616 147.085C106.338 146.261 106.06 145.437 105.782 144.613C105.41 143.387 104.927 142.23 104.534 141.094C103.434 140.547 102.228 140.449 101.112 140.372C97.6518 140.209 94.2132 139.957 90.7487 139.414C90.0115 139.333 89.3426 139.363 88.4948 139.35C87.8353 140.14 87.1075 140.819 86.3374 141.677C85.5672 142.536 84.8182 143.304 84.1163 144.273C83.1295 145.648 81.7281 145.977 80.1431 145.883C79.4059 145.802 78.7794 145.652 77.9527 145.55C77.6889 145.866 77.3568 146.071 77.1613 146.498C74.5375 150.798 71.9137 155.098 69.5372 159.552C68.8612 160.812 68.3289 161.064 66.9182 160.632C66.2917 160.483 65.6864 160.243 65.213 159.846C63.84 158.855 62.335 158.023 60.8089 157.279C59.6195 156.711 58.4513 156.054 57.4787 154.969C56.1221 153.508 55.7924 152.103 56.4637 150.463C57.2669 148.666 58.9697 147.461 60.8444 147.53C62.7192 147.598 64.2453 148.342 65.6231 149.713C66.7748 150.84 67.705 152.104 68.3244 153.484C68.6447 154.128 68.9862 154.684 69.3748 155.439C70.4512 154.086 71.1272 152.826 71.8243 151.477C73.1127 149.226 74.5376 147.198 75.8684 144.768C75.0158 144.375 74.321 144.115 73.5579 143.743C73.1317 143.547 72.5947 143.418 72.1896 143.132C71.2687 142.628 70.9696 141.894 71.4713 140.971C71.8623 140.117 72.4111 139.396 72.8915 138.563C74.0056 136.65 75.1197 134.737 76.2337 132.824C76.408 132.486 76.6035 132.059 76.7095 131.611C76.5729 131.389 76.4575 131.077 76.2102 130.923C75.5319 130.193 75.433 129.412 75.645 128.515C76.0266 126.901 76.4082 125.286 76.8581 123.783C78.7942 117.993 80.8198 112.224 82.8454 106.454C83.5332 104.345 84.221 102.235 84.9087 100.126C84.9935 99.767 85.0995 99.3186 85.2055 98.8702C84.5107 98.6097 84.2045 99.105 83.8513 99.3997C80.999 101.466 77.869 102.709 74.4869 103.417C72.7063 103.75 70.9894 103.814 69.157 103.566C66.3873 103.284 64.0298 102.059 62.042 100.068C59.8753 98.0355 58.1937 95.55 56.7335 92.9278C56.1872 92.0395 55.7515 91.0829 55.1368 90.0836C54.694 90.3568 54.2936 90.4507 53.9403 90.7454C52.7015 91.5866 51.2106 91.8939 49.788 92.3123C49.4984 92.3379 49.2087 92.3635 48.919 92.3891C47.0866 92.1413 45.2967 91.7141 43.6127 90.8385C43.3654 90.6847 43.1181 90.531 42.8708 90.3772C42.1501 89.8263 41.7616 89.0704 42.0842 88.1053C42.1902 87.6569 42.3645 87.3196 42.56 86.8925C41.9972 86.474 41.5238 86.0768 41.0504 85.6796C39.2887 83.9329 39.4654 81.9856 41.6369 80.7985C42.0797 80.5253 42.5696 80.4527 43.1019 80.2008C43.4929 79.3467 43.3681 78.2748 44.296 77.5489C45.224 76.823 46.1661 77.2374 47.2825 77.3143C47.4309 76.6866 47.5792 76.0588 47.8171 75.4524C48.0974 74.6667 48.4672 73.9023 48.9265 73.1593C49.6284 72.19 50.7188 71.9765 51.7763 72.7026C52.2497 73.0998 52.7019 73.5867 53.0646 74.0522C53.9736 75.406 54.8827 76.7598 55.8601 78.2246C56.2558 77.7506 56.6515 77.2766 57.1367 76.824C57.6642 76.192 58.3708 75.6027 59.1716 75.4149C60.7048 74.9282 61.8942 75.4963 62.3817 77.0337C62.5701 77.8365 62.7373 78.7291 62.636 79.5575C62.57 81.4365 62.0565 83.2087 60.8483 84.7203C59.7295 86.2533 58.3635 87.6326 57.0445 89.2125C57.1599 89.5243 57.2541 89.9257 57.5273 90.3699C58.8085 92.9493 60.3322 95.3024 62.1881 97.4506C65.4476 101.26 69.5433 102.332 74.2843 101.474C77.8454 100.808 81.0391 99.297 83.8442 97.0296C84.0868 96.8033 84.3294 96.5769 84.7039 96.1926C83.6418 95.0865 82.3629 94.4971 81.369 93.502C80.3751 92.5069 79.2706 91.5801 78.2979 90.4954C77.304 89.5003 76.3313 88.4155 75.4694 87.2624C74.6074 86.1093 73.7454 84.9562 73.0836 83.7562C72.4218 82.5561 71.8495 81.3774 71.2984 80.1091C70.7686 78.751 70.3282 77.4144 69.9773 76.099C69.6476 74.694 69.3179 73.289 69.0777 71.9054C68.8375 70.5218 68.708 69.0698 68.489 67.5965C67.9261 67.1779 67.2737 66.738 66.7532 66.1401C62.9826 62.4929 60.0129 55.0578 63.626 47.7727C65.2582 44.4675 69.7732 43.3661 72.4816 45.9072C72.7077 46.1507 72.8655 46.2831 73.2706 46.5692C73.6874 46.0055 74.1938 45.4632 74.6319 44.8099C74.248 44.4341 74.0219 44.1906 73.7063 43.9258C72.2438 42.9136 70.7812 41.9014 69.3399 40.7995C68.3036 39.9838 67.4887 39.0314 66.9164 37.8527C65.2514 34.8975 66.8483 30.5417 70.5201 29.8075C72.1004 29.5215 73.6384 29.4149 75.1598 29.778C79.0082 30.6964 82.8354 31.7046 86.7521 32.7341C87.0206 32.7981 87.2891 32.8622 87.6259 33.0373C88.0687 32.7641 88.5798 32.6018 89.0437 32.2389C93.1183 29.8008 97.4708 28.1869 102.075 27.1068C104.967 26.4708 107.749 25.903 110.698 26.2278C114.673 26.6082 118.564 27.3473 122.243 28.9832C123.006 29.3547 123.811 29.547 124.723 29.2908C126.014 29.0304 127.245 29.4191 128.413 30.0769C129.65 30.8457 130.665 31.7511 131.527 32.9042C132.231 33.9249 132.735 34.9925 132.549 36.1797C133.432 37.2431 134.337 38.2168 135.041 39.2375C138.442 43.6491 140.446 48.7695 141.739 54.0992C142.728 58.3142 143.116 62.67 142.836 67.0558C142.749 69.0244 142.661 70.9931 142.016 72.9233C141.715 73.7987 141.682 74.7382 141.427 75.8143C142.028 75.6734 142.518 75.6009 143.008 75.5283C143.877 75.4515 144.677 75.2637 145.525 75.2766C147.958 75.3835 149.268 76.6434 149.654 79.0093C149.925 81.0634 149.659 82.9893 148.566 84.8127C146.797 87.8958 144.187 89.7362 140.899 90.8462C138.834 91.5849 136.674 91.922 134.415 91.4777C134.147 91.4137 133.857 91.4393 133.768 91.4179C131.801 92.938 130.013 94.5009 128.158 95.9527C126.302 97.4045 124.172 98.4121 122.043 99.4198C119.935 100.338 117.712 100.944 115.289 101.597C115.946 102.417 116.64 102.678 117.314 103.028C120.84 104.911 124.212 107.043 127.342 109.4C128.941 110.634 130.451 111.847 131.94 113.15C132.639 113.791 133.317 114.521 133.974 115.341C135.267 117.071 135.402 118.903 134.488 120.769C134.313 121.106 134.118 121.533 133.944 121.87C134.495 123.139 135.046 124.407 135.618 125.586C136.81 128.144 137.043 130.757 136.675 133.512C136.388 135.527 135.46 136.253 133.385 136.232C133.206 136.189 132.938 136.125 132.737 136.172C130.936 136.595 129.699 135.826 128.679 134.54C128.611 134.429 128.453 134.297 128.296 134.165C127.874 134.348 127.363 134.51 126.852 134.673C125.25 135.048 124.214 134.233 124.127 132.601C124.143 132.132 124.16 131.662 124.198 131.102C123.571 130.953 123.034 130.825 122.518 130.607C121.466 130.261 121.098 129.415 121.331 128.429C121.501 127.711 121.828 127.126 122.177 126.452C122.735 126.49 123.088 126.196 123.526 125.542ZM76.7422 45.8819C76.3465 46.3559 75.9932 46.6506 75.8189 46.9879C72.8583 51.1129 71.1083 55.7163 70.6583 60.8195C70.2036 65.5425 70.7075 70.2102 71.7013 74.8052C72.7634 79.5113 74.6899 83.7606 77.8128 87.348C79.306 89.0307 80.8886 90.7347 82.5137 92.2594C84.7699 94.3136 87.4218 95.8939 90.2693 97.0472C96.2538 99.3281 102.446 100.332 108.807 100.619C113.963 100.807 118.814 99.8807 123.358 97.4598C128.965 94.5349 133.511 90.504 136.632 84.9014C137.482 83.3044 138.264 81.5963 138.599 79.7813C138.441 79.6489 138.351 79.6276 138.351 79.6276C138.172 79.5849 138.083 79.5635 137.904 79.5208C136.255 79.6957 135.419 78.833 134.91 77.3853C134.68 76.7618 134.538 76.1597 134.397 75.5575C134.128 75.4935 133.949 75.4507 133.66 75.4763C132.322 75.536 131.665 74.716 131.361 73.6014C131.083 72.7772 131.006 71.906 130.928 71.0349C130.794 69.2028 131.239 67.3196 131.463 65.573C131.547 65.2143 131.543 64.8342 131.559 64.3645C128.973 64.5052 126.54 64.3983 124.192 63.9326C117.953 62.7278 111.931 61.0064 106.1 58.4778C102.489 56.953 98.8786 55.4281 95.2681 53.9033C89.6839 51.5285 84.1893 49.175 78.6051 46.8002C78.2 46.5141 77.5052 46.2535 76.7422 45.8819ZM77.8919 129.809C78.9022 130.334 79.8019 130.928 80.7864 131.163C82.9131 131.765 85.0398 132.368 87.2514 132.611C91.2953 133.103 95.4711 133.436 99.5573 133.748C103.933 134.035 108.347 133.762 112.728 134.428C112.907 134.471 113.196 134.445 113.397 134.398C114.176 134.3 114.772 133.779 114.673 132.998C114.591 131.746 114.419 130.474 114.247 129.201C113.715 125.853 113.293 122.437 112.761 119.089C112.255 116.031 111.659 112.952 111.063 109.873C110.729 108.088 110.305 106.281 109.881 104.475C109.74 103.873 109.598 103.271 109.457 102.669C109.099 102.583 108.941 102.451 108.741 102.498C106.619 102.275 104.455 102.233 102.354 101.921C98.1308 101.387 93.9928 100.494 89.9348 98.8621C89.3295 98.6229 88.6771 98.183 87.8339 98.5502C87.5536 99.3359 87.2522 100.211 86.9507 101.087C85.6387 105.037 84.2161 109.055 82.9041 113.005C81.2907 117.831 79.6561 122.746 78.1321 127.593C77.8942 128.199 77.6352 128.895 77.8919 129.809ZM131.71 62.1268C131.079 61.5972 130.763 61.3324 130.448 61.0676C127.523 59.0432 124.597 57.0188 121.651 55.084C112.654 49.1474 103.526 43.3688 93.7634 38.6705C91.811 37.7309 89.9904 36.6332 88.1275 35.7149C83.8858 33.6605 79.279 32.7505 74.6723 31.8406C73.5983 31.5843 72.4395 31.6867 71.2596 31.8787C68.7678 32.4209 67.5312 35.2521 68.8289 37.3618C69.3281 38.0494 69.8274 38.737 70.4374 39.3562C72.2886 41.1243 74.4035 42.5764 76.8458 43.4435C77.1826 43.6186 77.5406 43.7041 77.7879 43.8578C79.3141 44.601 80.7978 45.5236 82.3452 46.1771C88.7819 48.9448 95.1503 51.6015 101.608 54.2796C105.914 56.065 110.176 58.0297 114.677 59.3881C118.73 60.6396 122.715 61.7802 126.891 62.1136C128.413 62.4767 129.866 62.7288 131.71 62.1268ZM122.205 33.1426C121.715 33.2151 121.225 33.2877 120.714 33.4499C116.578 34.5471 112.332 35.7126 108.337 37.4119C106.873 38.0096 105.433 38.8978 104.037 39.6066C103.394 39.9268 102.751 40.247 102.449 41.1224C105.101 42.7027 107.753 44.283 110.473 45.9743C113.104 47.6443 115.735 49.3142 118.387 50.8945C121.018 52.5644 123.516 54.3924 126.19 55.883C127.023 54.7556 127.023 54.7556 127.362 53.3208C128.227 49.264 128.802 45.2327 128.929 41.0947C128.915 39.9544 129.08 38.857 128.686 37.721C127.476 37.2426 126.223 36.9436 125.165 36.2175C124.129 35.4018 123.267 34.2487 122.205 33.1426ZM113.13 136.324C111.187 136.145 109.265 135.875 107.28 135.875C102.282 135.819 97.3481 135.494 92.4351 135.08C88.3489 134.768 84.2367 134.165 80.2729 132.935C79.8254 132.828 79.3779 132.722 78.9304 132.615C77.1616 135.698 75.4352 138.602 73.6875 141.595C75.8661 142.778 78.0823 143.402 80.4304 143.867C81.5256 144.034 82.3476 143.757 83.1178 142.898C84.1729 141.634 85.3859 140.503 86.3515 139.217C87.4491 137.774 88.8034 137.245 90.6357 137.493C90.9937 137.578 91.3729 137.574 91.6414 137.638C94.5006 137.941 97.4705 138.176 100.33 138.48C101.715 138.621 103.189 138.783 104.574 138.924C105.511 138.958 106.164 139.398 106.51 140.334C106.993 141.491 107.454 142.738 107.847 143.874C108.125 144.698 108.403 145.522 108.592 146.325C108.848 147.239 109.501 147.679 110.396 147.893C111.738 148.213 113.123 148.354 114.55 148.316C115.276 145.647 114.802 141.65 113.13 136.324ZM128.257 57.1344C128.573 57.3992 128.71 57.6212 128.867 57.7536C132.85 60.5041 136.701 63.4126 140.288 66.6371C140.445 66.7695 140.714 66.8335 140.982 66.8976C142.429 57.5796 137.269 42.6113 130.919 37.8749C130.714 41.1418 130.731 44.272 130.347 47.4962C129.873 50.699 129.11 53.9273 128.257 57.1344ZM100.382 39.871C100.603 39.7344 100.803 39.6874 100.914 39.6191C103.519 37.3987 106.512 35.9342 109.689 34.8925C113.178 33.7354 116.734 32.6895 120.29 31.6435C120.691 31.5496 121.023 31.3446 121.645 31.1141C120.792 30.7211 120.387 30.435 119.85 30.3068C117.523 29.7515 115.128 29.0851 112.758 28.7091C110.389 28.3331 107.956 28.2262 105.533 28.8793C104.421 29.1825 103.331 29.3959 102.24 29.6093C98.3893 30.3008 94.7269 31.7952 91.3377 33.7337C91.0056 33.9387 90.7418 34.2547 90.4097 34.4596C91.6085 35.7878 95.6288 37.9789 100.382 39.871ZM50.8836 74.479C49.7602 75.632 49.4634 76.8874 49.7931 78.2924C49.9556 78.8049 50.2076 79.3387 50.2594 79.9195C50.2853 80.2099 50.0898 80.6369 49.8684 80.7736C49.647 80.9102 49.1783 80.8931 48.9098 80.829C48.0572 80.4361 47.3366 79.8851 46.5052 79.4025C46.3474 79.2701 45.8575 79.3427 45.7256 79.5007C45.5937 79.6586 45.5089 80.0174 45.6455 80.2394C45.8975 80.7733 46.3285 81.3498 46.5805 81.8836C46.7854 82.2167 46.9691 82.6395 46.5946 83.0238C46.2201 83.4081 45.8409 83.4124 45.4146 83.2159C45.0779 83.0408 44.6727 82.7546 44.336 82.5795C43.8202 82.3617 43.3515 82.3446 42.9087 82.6178C42.155 83.0064 41.9854 83.7238 42.5954 84.3431C43.2737 85.0734 44.1051 85.556 45.2003 85.7226C45.5582 85.8081 45.9374 85.8038 46.1847 85.9576C46.432 86.1113 46.6581 86.3548 46.7052 86.5555C46.7523 86.7562 46.6463 87.2046 46.4461 87.2516C46.0033 87.5248 45.5135 87.5974 45.1602 87.892C44.8281 88.097 44.6326 88.524 44.3688 88.84C45.8784 90.0529 47.6425 90.1897 49.2535 90.5742C49.5219 90.6383 49.8328 90.523 50.1225 90.4974C51.9926 90.1858 53.6106 89.3404 55.045 88.0722C55.7515 87.4829 56.2108 86.7399 57.2801 86.6161C57.4803 86.5692 57.7229 86.3429 57.9655 86.1165C58.7993 84.9892 59.7225 83.8832 60.488 82.6449C61.2747 81.3168 61.4349 79.8393 61.2371 78.2763C61.2112 77.9859 61.0062 77.6528 60.8226 77.23C60.5329 77.2556 60.1537 77.2598 59.9323 77.3964C59.3576 77.8277 58.8724 78.2804 58.4555 78.844C58.0386 79.4077 57.7795 80.1037 57.5417 80.7101C57.325 81.2268 56.9717 81.5215 56.4818 81.594C55.8129 81.6239 55.429 81.248 55.177 80.7142C55.0404 80.4921 54.925 80.1804 54.8991 79.89C54.3433 78.2416 53.3448 76.8664 52.3462 75.4912C51.7197 75.3417 51.2463 74.9445 50.8836 74.479ZM123.684 129.275C124.042 129.36 124.132 129.381 124.311 129.424C124.6 129.398 124.89 129.373 125.18 129.347C125.491 129.232 125.891 129.138 126.202 129.023C127.092 128.856 127.591 129.544 127.311 130.33C127.052 131.026 126.682 131.79 126.423 132.486C126.381 132.665 126.475 133.067 126.633 133.199C126.791 133.332 127.191 133.238 127.391 133.191C127.855 132.828 128.23 132.444 128.694 132.081C129.158 131.718 129.874 131.889 130.126 132.422C130.309 132.845 130.314 133.225 130.498 133.648C130.681 134.071 130.844 134.583 131.402 134.622C132.245 134.255 132.431 133.067 133.611 132.875C133.753 133.477 133.915 133.99 134.078 134.502C134.125 134.703 134.372 134.857 134.551 134.9C134.751 134.853 135.083 134.648 135.215 134.49C135.75 132.628 135.705 130.817 135.192 128.989C134.888 127.875 134.316 126.696 133.922 125.56C133.345 124.001 132.304 122.806 130.957 122.105C129.452 121.272 127.731 120.956 126.035 120.93C125.366 120.96 124.586 121.058 123.965 121.289C123.654 121.404 123.369 121.81 123.326 121.989C123.331 122.369 123.515 122.792 123.72 123.125C123.856 123.347 124.214 123.433 124.483 123.497C125.02 123.625 125.557 123.753 126.073 123.971C127.125 124.317 127.292 125.209 126.454 125.957C126.101 126.251 125.658 126.525 125.215 126.798C124.377 127.545 123.67 128.134 123.684 129.275ZM135.671 90.1668C135.939 90.2309 136.276 90.406 136.476 90.359C138.083 90.3634 139.684 89.9878 141.239 89.4114C143.947 88.3525 146.156 86.6061 147.44 83.9756C148.158 82.5365 148.25 80.9479 147.942 79.4533C147.685 78.5394 147.143 78.0311 146.248 77.8175C144.906 77.4972 143.684 77.8686 142.551 78.2614C141.618 78.6072 140.911 79.1965 140.568 80.2512C139.583 83.6163 138.083 86.7635 135.93 89.4708C135.887 89.6501 135.824 89.9191 135.671 90.1668ZM68.5032 65.1367C68.621 63.8385 68.6752 62.8093 68.7294 61.7802C69.0238 58.5346 69.4078 55.3105 70.7975 52.2316C71.1884 51.3776 71.5794 50.5235 71.9492 49.7591C72.2978 49.0844 72.1565 48.4823 71.7043 47.9954C71.3204 47.6196 70.847 47.2224 70.3313 47.0046C68.4259 46.2656 66.318 47.1836 65.4512 49.2504C65.0602 50.1045 64.7587 50.9799 64.5467 51.8767C63.3549 56.5185 64.6761 60.5286 67.4881 64.2313C67.6035 64.543 68.0298 64.7395 68.5032 65.1367ZM133.542 73.1746C133.785 72.9482 134.006 72.8116 134.138 72.6536C134.291 72.4059 134.444 72.1583 134.666 72.0216C135.261 71.5007 136.156 71.7143 136.255 72.4958C136.354 73.2773 136.364 74.0374 136.463 74.8189C136.609 75.8011 136.554 76.8303 137.412 77.6033C138.771 77.454 139.541 76.5957 139.838 75.3402C140.155 73.995 140.405 72.5388 140.723 71.1937C140.935 70.2969 140.726 69.5837 140.026 68.9431C138.38 67.5081 136.734 66.0731 134.998 64.6167C134.751 64.463 134.482 64.3989 134.235 64.2451C132.887 67.1447 132.619 70.6805 133.542 73.1746ZM67.7426 158.745C68.3597 158.134 68.3291 157.464 68.1666 156.951C67.4012 154.59 66.2142 152.412 64.363 150.643C63.5058 149.87 62.5425 149.546 61.4473 149.379C60.2627 149.191 59.2452 149.896 58.7011 150.997C58.1782 152.009 58.2771 152.791 59.2922 153.696C59.9917 154.337 60.7336 154.798 61.5649 155.281C63.3172 156.267 65.1802 157.186 66.8688 158.441C67.0478 158.484 67.4058 158.57 67.7426 158.745ZM123.924 155.858C123.234 155.978 123.017 156.494 122.711 156.99C121.465 159.061 120.556 161.307 120.094 163.66C120.009 164.019 119.924 164.377 119.95 164.668C119.913 165.227 119.943 165.898 120.549 166.137C121.154 166.376 121.618 166.013 122.082 165.65C122.192 165.582 122.303 165.513 122.435 165.355C124.171 163.212 125.212 160.808 125.132 157.946C125.033 157.165 124.734 156.43 123.924 155.858ZM128.1 35.4021C128.658 35.4406 129.195 35.5687 129.753 35.6072C129.932 35.6499 130.265 35.445 130.286 35.3553C130.349 35.0863 130.413 34.8172 130.276 34.5952C129.572 33.5745 128.647 32.6904 127.457 32.1223C126.941 31.9045 126.404 31.7764 125.867 31.6482C125.42 31.5414 124.998 31.725 124.713 32.1307C124.428 32.5363 124.612 32.9591 124.817 33.2922C125.589 34.424 126.647 35.15 128.1 35.4021Z\",\n    fill: \"#1D262D\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M95.8978 73.6579C98.9871 74.5846 101.629 75.4046 104.292 76.1349C104.471 76.1776 104.74 76.2416 104.897 76.374C105.75 76.7669 106.138 77.5226 105.768 78.2868C104.638 80.6691 103.597 83.0727 102.309 85.3226C101.306 87.167 99.4624 87.7688 97.4304 87.568C92.8082 87.1278 89.5329 83.7889 89.1398 79.054C88.9632 77.4017 89.2764 75.6768 89.3895 73.9989C89.4437 72.97 89.8864 72.6968 90.9813 72.8634C92.7025 73.1795 94.5133 73.5169 95.8978 73.6579ZM103.489 77.9322C100.131 76.9415 96.7266 75.75 93.2841 75.1179C92.6577 74.9684 91.8996 74.9768 91.1414 74.9853C90.4161 77.6537 90.5125 80.0446 91.7675 82.3332C92.9071 84.31 94.4165 85.5227 96.8064 85.8089C98.7278 86.078 100.192 85.4804 100.995 83.683C101.777 81.9753 102.627 80.3786 103.409 78.6709C103.541 78.5129 103.494 78.3122 103.489 77.9322Z\",\n    fill: \"#1D262D\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M84.6583 60.0791C85.9111 60.3781 86.9731 61.4841 87.0555 62.7352C87.2062 64.0973 86.5515 65.2673 85.1974 65.7966C84.5757 66.0272 84.0435 66.279 83.3535 66.3985C81.5944 66.6418 80.5111 65.6255 80.3557 63.8833C80.2334 61.2017 82.9109 59.4726 84.6583 60.0791Z\",\n    fill: \"#1D262D\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M116.269 76.2305C114.68 75.7564 113.928 74.5352 114.305 72.5412C114.576 70.9955 116.573 70.146 118.252 70.6414C119.484 71.0301 120.623 73.0071 120.237 74.2411C119.787 75.744 117.88 76.6149 116.269 76.2305Z\",\n    fill: \"#1D262D\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M97.498 123.6C96.2546 124.061 95.169 124.654 94.1305 125.448C93.8879 125.675 93.5559 125.879 93.3133 126.106C92.0747 126.947 90.6641 126.515 90.3556 125.021C90.1202 124.017 90.0637 123.057 90.1179 122.028C90.1721 120.999 90.3369 119.901 90.4335 118.693C89.8707 118.274 89.1501 117.724 88.4978 117.284C87.2827 116.425 86.3102 115.341 85.38 114.077C84.6076 112.945 85.3094 111.976 86.1525 111.609C86.574 111.425 87.0638 111.353 87.5536 111.28C88.5333 111.135 89.5129 110.99 90.4925 110.845C91.3827 110.678 92.3411 110.623 93.2313 110.456C93.9967 109.218 94.762 107.98 95.5062 106.831C95.923 106.268 96.3399 105.704 96.9145 105.273C97.9742 104.389 99.048 104.645 99.7097 105.845C100.03 106.49 100.15 107.182 100.47 107.827C100.816 108.762 101.073 109.676 101.309 110.679C102.583 110.888 103.746 111.166 104.93 111.354C105.915 111.589 106.788 111.892 107.577 112.554C108.592 113.459 108.623 114.13 107.831 115.078C106.908 116.183 105.875 117.358 104.951 118.463C104.798 118.711 104.645 118.959 104.381 119.275C104.527 120.257 104.673 121.239 104.798 122.311C104.902 123.472 105.116 124.565 105.13 125.705C105.144 126.845 104.438 127.435 103.364 127.178C102.648 127.007 102.043 126.768 101.369 126.418C100.538 125.936 99.7493 125.274 98.9392 124.701C98.4235 124.484 97.9714 123.997 97.498 123.6ZM106.301 113.955C104.685 113.19 103.228 112.558 101.516 113.002C100.694 113.279 100.268 113.083 99.9686 112.349C99.4859 111.191 99.1821 110.077 98.6994 108.92C98.4686 108.296 98.4804 107.447 97.8281 107.007C97.5432 107.412 97.1899 107.707 96.905 108.112C96.1396 109.351 95.4637 110.61 94.809 111.78C94.3074 112.702 94.1755 112.86 93.17 112.715C91.4486 112.399 89.8261 112.864 88.1352 113.219C87.9351 113.266 87.6925 113.492 87.45 113.718C88.2482 115.14 89.574 115.93 90.8103 116.699C92.6306 117.796 92.7884 117.929 92.169 120.149C91.8723 121.404 91.5543 122.749 92.0417 124.287C93.2639 123.915 94.1235 123.078 95.2774 122.596C95.9203 122.276 96.6315 122.067 97.2532 121.836C97.7642 121.674 98.2116 121.781 98.5955 122.156C99.2948 122.797 99.9942 123.438 100.715 123.988C101.346 124.518 101.977 125.047 102.961 125.282C102.999 124.723 103.084 124.364 102.99 123.963C102.886 122.802 102.761 121.73 102.457 120.615C102.175 119.411 102.408 118.425 103.289 117.498C104.391 116.435 105.246 115.218 106.301 113.955Z\",\n    fill: \"#1D262D\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBoy2);\nexport default __webpack_public_path__ + \"static/media/boy2.fffc6d47ebd3f58f1eef002f02400fd4.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\nimport classes from './InstaBlock.module.css'\nimport girl2 from '../../../Assets/girl2.svg'\nimport boy2 from '../../../Assets/boy2.svg'\nimport { BsInstagram } from 'react-icons/bs';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@mui/material';\n\nconst InstaBlock = (props) => {\n    const { t } = useTranslation()\n\n    return (\n        <div className={classes.main}>\n            <img src={girl2} alt=\"girl\" className={classes.girl}/>\n            <div className={classes.info}>\n                <p>{t(\"insta\")}</p>\n                <Button className={classes.button}>\n                    <a href='https://www.instagram.com/ostrovokdetstva_zp_reserv/' target={\"_blank\"} rel=\"noopener noreferrer\">\n                        <BsInstagram/>\n                        <span>{t(\"actions.subscribe\")}</span>\n                    </a>\n                </Button>\n            </div>\n            <img src={boy2} alt=\"boy\" className={classes.boy}/>\n        </div>\n    )\n}\n\nexport default InstaBlock","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"HgTag_main__0UkdQ\",\"block0\":\"HgTag_block0__csXWj\",\"block1\":\"HgTag_block1__aGGD7\",\"block2\":\"HgTag_block2__CbMqB\"};","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { useNavigate } from 'react-router-dom'\nimport { cx } from '../../../../../Utils/classnames'\nimport classes from './HgTag.module.css'\n\nconst HgTag = (props) => {\n    const { \n        tag, \n        currentLanguage,\n        index\n    } = props\n\n    const [blockIndex, setBlockIndex] = useState(0)\n\n    const navigate = useNavigate()\n\n    useEffect(() => {\n        if(index === 0) {\n            setBlockIndex(0)\n        }else if(index === 1) {\n            setBlockIndex(1)\n        }else if(index === 2) {\n            setBlockIndex(2)\n        }else if(index === 3) {\n            setBlockIndex(0)\n        }else if(index === 4) {\n            setBlockIndex(1)\n        }\n    }, [])\n\n    const handleClick = () => {\n        navigate(`/catalog?pageNumber=1&pageSize=25&searchBy=tags&from=asc&searchValue=${tag._id}`)\n    }\n\n    return (\n        <div onClick={handleClick} className={cx(classes.main, classes[`block${blockIndex}`])}>\n            <p>{currentLanguage === \"ru\" ? tag.name : tag.name_ua}</p>\n        </div>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n    currentLanguage: state.common.currentLanguage\n})\n\nexport default connect(mapStateToProps, null)(HgTag)","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"HgTags_main__kYtwy\"};","import React from 'react'\nimport HgTag from './HgTag/HgTag'\nimport classes from './HgTags.module.css'\n\nconst HgTags = (props) => {\n    const { tags } = props\n\n    return (\n        <div className={classes.main}>\n            {tags.map((el, index) => (\n                <HgTag \n                    key={el._id}\n                    index={index}\n                    tag={el}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default HgTags","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"NewsList_main__IwKfz\",\"header\":\"NewsList_header__E1Lv1\",\"slider\":\"NewsList_slider__zlgCV\",\"item\":\"NewsList_item__FXYrU\"};","import React from 'react'\nimport classes from './NewsList.module.css'\nimport { useTranslation } from 'react-i18next'\nimport { NavLink } from 'react-router-dom'\nimport CustomSlider from '../Slider/CustomSlider'\nimport NewsSmallItem from './NewsSmallItem/NewsSmallItem'\n\nconst NewsList = (props) => {\n    const { items, href, title, slidesToShow = 5 } = props\n\n    const { t } = useTranslation()\n\n    return (\n        <div className={classes.main}>\n            <div className={classes.header}>\n                <h4>{title}</h4>\n                <NavLink to={href}>{t(\"news.all\")}</NavLink>\n            </div>\n            <div className={classes.slider}>\n                <CustomSlider \n                    slidesToShow={slidesToShow}\n                    responsive={[\n                        {\n                            breakpoint: 1170,\n                            settings: {\n                              slidesToShow: 3,\n                              slidesToScroll: 1,\n                            }\n                        },\n                        {\n                            breakpoint: 862,\n                            settings: {\n                              slidesToShow: 3,\n                              slidesToScroll: 1,\n                            }\n                        },\n                        {\n                          breakpoint: 600,\n                          settings: {\n                            slidesToShow: 2,\n                            slidesToScroll: 1,\n                          }\n                        },\n                        {\n                          breakpoint: 480,\n                          settings: {\n                            slidesToShow: 1,\n                            slidesToScroll: 1\n                          }\n                        }\n                    ]}\n                >\n                    {items.map(el => <NewsSmallItem key={el._id} item={el} className={classes.item}/>)}\n                </CustomSlider>\n            </div>\n        </div>\n    )\n}\n\nexport default NewsList","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"ToySelector_main__BlUP6\",\"children\":\"ToySelector_children__OExAO\",\"side\":\"ToySelector_side__N4-j+\",\"priceRange\":\"ToySelector_priceRange__zGWps\",\"blockTitle\":\"ToySelector_blockTitle__BnvTc\",\"priceInputs\":\"ToySelector_priceInputs__QCv0b\",\"submit\":\"ToySelector_submit__rVo58\"};","import React, { useEffect, useState } from 'react'\nimport classes from './ToySelector.module.css'\nimport children_img from '../../../Assets/children.jpg'\nimport { useTranslation } from 'react-i18next'\nimport { Autocomplete, Button, MenuItem, TextField } from '@mui/material';\nimport { useForm, Controller } from 'react-hook-form'\nimport { makeStyles } from '@mui/styles'\nimport { useChildAge } from '../../../Hooks/useChildAge';\nimport { useNavigate } from 'react-router-dom';\nimport CustomPrettoSlider from '../../UI/Form/PrettoSlider/PrettoSlider';\n\nconst useStyles = makeStyles((theme) => ({\n    root:{\n        background: \"white\",\n        width: \"100%\",\n        \"@media screen and (max-width: 468px)\": {\n            width: \"100%\"\n        },\n        '& input': {\n            fontSize: \"14px\",\n            fontFamily: \"Montserrat\"\n        },\n        '& .MuiOutlinedInput-root:hover .MuiOutlinedInput-notchedOutline': {\n            borderColor: \"#9DC8CF\"\n        },\n        '& label.Mui-focused': {\n            color: '#9DC8CF'\n        },\n        '& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline': {\n            borderColor: '#9DC8CF' \n        },\n        '& .MuiOutlinedInput-root': {\n            borderRadius: 0,\n            height: \"50px\",\n            fontFamily: \"Montserrat\",\n            fontSize: \"14px\"\n        },\n        '& .MuiFormHelperText-root.Mui-error': {\n            margin: 0,\n            marginTop: 5,\n        }\n    }\n}));\n\nconst ToySelector = (props) => {\n    const { tags, currentLanguage } = props\n\n    const { handleSubmit, reset, control, setValue } = useForm()\n\n    const { t } = useTranslation()\n\n    const material = useStyles()\n\n    const navigate = useNavigate()\n\n    const [priceRange, setPriceRange] = useState([0, 30000])\n    const [ageRange, setAgeRange] = useState([0, 0])\n\n    const ages = useChildAge()\n\n    const newTags = [...tags]\n\n    const nonTag = {\n        _id: \"none\",\n        name: t(\"selector.any\"),\n        name_ua: t(\"selector.any\")\n    }\n\n    newTags.push(nonTag)\n\n    const handlePriceRange = (event, newValue) => {\n        setPriceRange(newValue);\n        setValue(\"minPrice\", newValue[0])\n        setValue(\"maxPrice\", newValue[1])\n    }\n\n    const handleAgeRange = (value) => {\n        setAgeRange(value)\n        setValue(\"minAge\", value[0])\n        setValue(\"maxAge\", value[1])\n    }\n\n    const onSubmit = (data) => {\n        data.tag = data.tag._id\n        navigate(`/catalog?pageNumber=1&pageSize=25&searchBy=selector&from=asc&minAge=${data.minAge === -1 ? 0 : data.minAge}&maxAge=${data.maxAge === -1 ? 17 : data.maxAge}&minPrice=${data.minPrice}&maxPrice=${data.maxPrice}&tag=${data.tag}`)\n    }\n\n    useEffect(() => {\n        reset({\n            minPrice: 0,\n            maxPrice: 30000,\n            minAge: 0,\n            maxAge: 0,\n            tag: nonTag\n        })\n    }, [])\n\n    return (\n        <div className={classes.main}>\n            <img src={children_img} alt=\"children\" className={classes.children}/>\n            <div className={classes.side}>\n                <h3>{t(\"selector.title\")}</h3>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className={classes.priceRange}>\n                        <h4 className={classes.blockTitle}>{t(\"selector.priceTitle\")}</h4>\n                        <div className={classes.priceInputs}>\n                            <Controller\n                                name=\"minPrice\"\n                                control={control}\n                                defaultValue=\"\"\n                                rules={{ required: t(\"errors.required\") }}\n                                render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                    <TextField\n                                        onChange={(e) => {\n                                            const onlyNums = e.target.value.replace(/[^0-9]/g, '');\n                                            setValue(\"minPrice\", Number(onlyNums))\n                                            setPriceRange([Number(onlyNums), priceRange[1]])\n                                        }}\n                                        value={value}\n                                        classes={material}\n                                    />\n                                )}\n                            />\n                            <Controller\n                                name=\"maxPrice\"\n                                control={control}\n                                defaultValue=\"\"\n                                rules={{ required: t(\"errors.required\") }}\n                                render={({ field: { onChange, value }, fieldState: { error } }) => (\n                                    <TextField\n                                        onChange={(e) => {\n                                            const onlyNums = e.target.value.replace(/[^0-9]/g, '');\n                                            setValue(\"maxPrice\", Number(onlyNums))\n                                            setPriceRange([priceRange[0], Number(onlyNums)])\n                                        }}\n                                        value={value}\n                                        classes={material}\n                                    />\n                                )}\n                            />\n                        </div>\n                        <CustomPrettoSlider\n                            value={priceRange}\n                            onChange={handlePriceRange}\n                            max={30000}\n                        />\n                    </div>\n                    <h4 className={classes.blockTitle}>{t(\"selector.age\")}</h4>\n                    <TextField\n                        select\n                        classes={material}\n                        value={ageRange[0]}\n                        onChange={(e) => {\n                            const value = Number(e.target.value)\n                            switch(value){\n                                case 0: {\n                                    handleAgeRange([0, 0])\n                                    break\n                                }\n                                case 1: {\n                                    handleAgeRange([1, 2])\n                                    break\n                                }\n                                case 3: {\n                                    handleAgeRange([3, 5])\n                                    break\n                                }\n                                case 6: {\n                                    handleAgeRange([6, 9])\n                                    break\n                                }\n                                case 10: {\n                                    handleAgeRange([10, 12])\n                                    break\n                                }\n                                case 13: {\n                                    handleAgeRange([13, 17])\n                                    break\n                                }\n                                default: {\n                                    handleAgeRange([-1, -1])\n                                    break\n                                }\n                            }\n                        }}\n                    >\n                        {ages.map(el => (\n                            <MenuItem key={el.text} value={el.value[0]}>{el.text}</MenuItem>\n                        ))}\n                    </TextField>\n                    <h4 className={classes.blockTitle}>{t(\"selector.tag\")}</h4>\n                    <Controller\n                        name=\"tag\"\n                        control={control}\n                        defaultValue={[]}\n                        rules={{ required: t(\"errors.required\") }}\n                        render={({ field: { onChange, value }, fieldState: { error } }) => (\n                            <Autocomplete\n                                disablePortal\n                                options={newTags}\n                                value={value}\n                                getOptionLabel={option => currentLanguage === \"ru\" ? option.name : option.name_ua}\n                                onChange={(event, newValue) => {\n                                    setValue(\"tag\", newValue)\n                                }}\n                                filterSelectedOptions\n                                limitTags={10}\n                                isOptionEqualToValue={(option, value) => option._id === value._id}\n                                style={{ width: \"100%\" }}\n                                renderInput={(params) => <TextField {...params} classes={material} error={!!error} helperText={error ? error.message : null} />}\n                            />\n                        )}\n                    />\n                    <Button className={classes.submit} type=\"submit\">{t(\"selector.submit\")}</Button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default ToySelector","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Home_main__NRABM\",\"container\":\"Home_container__j1Eze\",\"top\":\"Home_top__d0Szb\",\"actionSlider\":\"Home_actionSlider__9Y2nq\",\"popular\":\"Home_popular__8GCsc\",\"tags\":\"Home_tags__Rgp9T\",\"selector\":\"Home_selector__0x8Mm\",\"insta\":\"Home_insta__tt2Sm\",\"news\":\"Home_news__c8xZm\",\"brands\":\"Home_brands__RvAQb\",\"brandsSlider\":\"Home_brandsSlider__s7jd6\",\"about\":\"Home_about__znYph\",\"sunImg\":\"Home_sunImg__IE1y7\",\"catList\":\"Home_catList__DE7pj\"};","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"BrandItem_main__a-v89\"};","import React from 'react'\nimport classes from './BrandItem.module.css'\nimport { useNavigate } from 'react-router-dom'\n\nconst BrandItem = (props) => {\n    const { item } = props\n\n    const navigate = useNavigate()\n\n    const onClick = () => {\n        navigate(`/catalog?pageNumber=1&pageSize=25&searchBy=brand&from=asc&searchValue=${item._id}`)\n    }\n\n    return (\n        <img \n            src={item.image} \n            alt={item.name}\n            className={classes.main}\n            onClick={onClick}\n        />\n    )\n}\n\nexport default BrandItem","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSun(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 198,\n    height: 200,\n    viewBox: \"0 0 198 200\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M128.524 73.0162C134.936 76.222 138.142 82.3282 140.126 89.3503C141.195 93.3193 142.263 97.1357 142.721 101.257C144.248 114.691 140.126 126.445 131.119 136.215C123.181 144.917 112.343 147.97 100.741 146.291C87.9181 144.459 77.0796 138.658 68.6836 128.583C62.2721 120.797 61.8141 111.485 63.3406 102.021C64.8672 91.9454 69.1415 82.9388 75.4004 75.4587C82.5751 66.6047 92.803 62.6357 104.252 62.483C105.168 62.483 106.084 62.483 106.847 62.941C113.869 66.4521 122.113 67.368 128.524 73.0162ZM74.6371 82.7861C69.1415 90.7242 66.0884 100.189 66.0884 110.569C66.0884 116.37 67.4623 121.866 71.2787 126.293C79.3694 136.063 90.0552 141.558 102.573 142.932C109.29 143.695 115.549 142.169 121.502 139.116C130.356 134.536 134.783 126.751 137.836 117.591C141.805 105.684 139.057 94.6932 134.478 83.8547C133.715 81.8702 132.035 79.8857 130.203 78.5118C125.929 75.1534 121.502 72.1003 116.007 70.7264C112.801 69.9631 110.053 67.9786 107 66.7574C105.779 66.2994 104.252 65.9941 102.878 66.1467C91.4291 67.5206 81.0486 71.1844 74.6371 82.7861Z\",\n    fill: \"#37395C\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M164.551 151.328C162.414 150.259 161.345 149.801 160.429 149.038C156.002 145.985 151.423 143.085 146.996 139.879C146.232 139.268 145.011 137.742 145.316 137.131C146.08 135.452 147.606 135.91 148.827 136.826C153.865 140.337 158.903 143.695 163.788 147.359C164.398 147.97 164.246 149.343 164.551 151.328Z\",\n    fill: \"#37395C\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M157.528 115.912C163.94 116.676 169.436 118.507 175.084 120.645C175.542 120.797 175.694 122.171 176 123.087C175.084 123.392 174.473 123.85 173.863 123.698C169.283 122.629 164.703 121.408 160.124 120.187C158.292 119.729 157.376 118.813 157.528 115.912Z\",\n    fill: \"#37395C\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.4407 91.4874C54.1819 90.1135 48.0757 88.587 42.1221 87.2131C41.2062 84.9232 42.2748 84.16 43.6487 84.4653C49.1442 85.5339 54.4872 86.6024 59.9827 87.9763C60.5934 88.129 61.0513 89.6555 61.5093 90.4188C61.204 90.8768 60.8987 91.1821 60.4407 91.4874Z\",\n    fill: \"#37395C\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.5 169.494C72.1947 168.425 71.4314 167.204 71.7368 166.441C74.0266 161.556 76.3164 156.671 78.9115 151.786C79.2168 151.328 80.4381 150.87 81.0487 151.023C81.5067 151.175 82.1173 152.549 81.9646 153.007C79.3695 158.503 76.7744 163.998 74.1792 169.494C73.416 169.494 72.958 169.494 72.5 169.494Z\",\n    fill: \"#37395C\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38 116.065C40.5951 112.706 44.1062 114.538 46.854 113.928C49.7544 113.317 52.8075 113.317 56.0133 113.012C56.0133 113.164 56.3186 114.08 56.7765 115.607C50.9757 116.828 45.6327 117.897 39.9845 117.744C39.5265 117.591 38.9159 116.675 38 116.065Z\",\n    fill: \"#37395C\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M174.626 87.8236C175.084 89.6555 174.015 90.4187 172.489 90.8767C168.825 91.9453 165.009 92.7086 161.345 93.6245C159.666 94.0825 158.75 93.3192 158.292 91.7926C161.955 88.5869 169.894 86.6024 174.626 87.8236Z\",\n    fill: \"#37395C\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M107.152 52.2551C106.541 45.9962 107.61 40.0427 108.831 34.0891C111.579 33.6311 112.19 35.005 112.037 36.6842C111.426 41.2639 110.816 45.9962 110.053 50.5758C109.9 51.3391 108.984 51.9497 108.373 52.713C107.915 52.713 107.457 52.4077 107.152 52.2551Z\",\n    fill: \"#37395C\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M89.1398 55.9187C88.3765 55.3081 87.1553 54.6975 86.6973 53.9342C84.7128 49.9652 83.0336 45.9962 81.3544 42.0271C81.0491 41.2639 81.5071 40.1953 81.6597 39.2794C82.5757 39.7373 84.1022 39.89 84.5602 40.6532C86.392 44.4696 87.9186 48.286 89.5978 52.255C89.9031 53.171 90.0557 54.2395 90.2084 55.1555C89.7504 55.3081 89.4451 55.6134 89.1398 55.9187Z\",\n    fill: \"#37395C\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M136.309 168.12C135.088 166.136 133.714 163.846 132.493 161.709C131.119 159.419 130.051 157.129 128.524 154.992C127.761 153.923 126.997 152.702 128.371 151.939C128.982 151.633 130.508 152.397 131.272 153.007C131.882 153.465 132.188 154.381 132.646 155.145C134.325 158.198 136.157 161.098 137.836 164.151C138.752 165.83 139.21 167.204 136.309 168.12Z\",\n    fill: \"#37395C\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M148.37 68.2839C151.576 64.4676 154.018 61.4145 156.613 58.6667C157.071 58.2087 158.14 58.2087 158.903 58.056C159.056 58.8193 159.514 59.7352 159.361 60.3459C158.903 61.4144 157.987 62.3304 157.224 63.2463C155.392 65.3835 153.56 67.368 151.728 69.5051C150.813 70.5737 149.897 72.2529 148.523 70.7264C147.912 70.1158 148.37 68.4366 148.37 68.2839Z\",\n    fill: \"#37395C\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M73.7216 67.8258C69.2946 65.536 66.0888 61.7196 62.1198 58.8192C61.5092 58.3612 61.5092 57.14 61.2039 56.0714C63.4937 56.2241 70.5158 60.8037 73.1109 63.8568C73.8742 64.7727 74.1795 65.994 74.7901 67.0626C74.4848 67.2152 74.0269 67.5205 73.7216 67.8258Z\",\n    fill: \"#37395C\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M47.4648 144.917C47.7702 143.695 47.6175 142.474 48.0755 142.016C51.5865 139.421 55.2502 137.131 58.914 134.841C59.3719 134.536 61.0511 134.994 61.2038 135.299C61.5091 136.063 61.5091 137.589 60.8985 138.047C57.5401 140.49 53.8763 142.779 50.3653 144.917C49.9073 145.222 48.8387 144.917 47.4648 144.917Z\",\n    fill: \"#37395C\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M128.829 58.056C127.913 57.1401 126.845 56.3768 126.997 55.9189C128.218 50.8813 130.814 46.4543 133.103 41.8746C135.393 42.4853 135.851 43.5538 135.088 45.0804C133.256 49.2021 131.272 53.1711 128.829 58.056Z\",\n    fill: \"#37395C\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M107.305 175.295C105.626 173.768 104.252 173.158 104.252 172.547C104.099 167.815 104.252 163.235 104.252 157.282C105.779 158.656 107.305 159.266 107.305 159.877C107.305 164.456 107.305 169.189 107.305 175.295Z\",\n    fill: \"#37395C\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M89.9027 111.027C92.0399 109.653 92.9558 110.111 93.8717 111.638C94.7877 113.317 95.8563 114.996 97.0775 116.37C101.352 121.255 107.916 121.102 112.038 115.912C113.412 114.08 114.785 112.248 116.159 110.417C116.465 110.569 116.923 110.722 117.228 110.722C117.381 111.79 118.144 113.164 117.686 113.775C114.785 118.049 112.19 122.782 106.084 123.545C102.573 123.85 99.52 123.392 96.9248 120.95C94.0244 118.049 91.5819 114.996 89.9027 111.027Z\",\n    fill: \"#37395C\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M113.259 94.8457C112.648 94.8457 110.969 95.4563 110.053 94.9984C107.61 93.6245 107 88.8922 108.832 86.6023C110.053 85.0758 111.58 84.3125 113.411 85.5337C115.396 86.755 115.701 91.3346 113.259 94.8457Z\",\n    fill: \"#37395C\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M102.42 96.0671C100.741 96.0671 99.6719 96.5251 99.0613 96.0671C96.4662 94.6932 95.3976 89.045 97.0768 86.7552C98.4507 84.7707 101.504 84.9233 102.114 87.0605C102.725 89.9609 102.267 92.8614 102.42 96.0671Z\",\n    fill: \"#37395C\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSun);\nexport default __webpack_public_path__ + \"static/media/sun.f6a6e32ce8177d309ef5f2807d39af41.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"MainSlide_main__2LZMU\"};","import React from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport useWindowDimensions from '../../../Hooks/useWindowDimension'\nimport classes from './MainSlide.module.css'\n\nconst MainSlide = (props) => {\n    const { item, currentLanguage } = props\n    \n    const navigate = useNavigate()\n\n    const { width } = useWindowDimensions()\n\n    const onClick = () => {\n        if(item.image) {\n            navigate(`/actions/${currentLanguage === \"ru\" ? item.title : item.title_ua}`)\n        }else {\n            navigate(`/blog/${currentLanguage === \"ru\" ? item.title : item.title_ua}`)\n        }\n    }\n\n    return(\n        <img \n            src={item.image ? (width <= 568 ? item.image_mobile : item.image) : item.images[0]} \n            alt=\"title img\"\n            className={classes.main}\n            onClick={onClick}\n        />\n    )\n}\n\nexport default MainSlide","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CategoriesList from '../../Components/Common/CategoriesList/CategoriesList'\nimport InstaBlock from '../../Components/Common/InstaBlock/InstaBlock'\nimport HgTags from '../../Components/Common/Items/HgTags/HgTags'\nimport NewsList from '../../Components/Common/News/NewsList'\nimport SmallItemsList from '../../Components/Common/Items/SmallItemsList/SmallItemsList'\nimport CustomSlider from '../../Components/Common/Slider/CustomSlider'\nimport ToySelector from '../../Components/Common/ToySelector/ToySelector'\nimport MaxWidthContainer from '../../Components/UI/Container/MaxWidthContainer/MaxWidthContainer'\nimport PaddingContainer from '../../Components/UI/Container/PaddingContainer/PaddingContainer'\nimport classes from './Home.module.css'\nimport BrandItem from '../../Components/Common/Brands/BrandItem'\nimport sun_img from '../../Assets/sun.svg'\nimport MainSlide from '../../Components/Common/MainSlide/MainSlide'\nimport AnimatedBlock from '../../Components/Animation/AnimatedBlock/AnimatedBlock'\nimport { Helmet } from 'react-helmet'\nimport useWindowDimensions from '../../Hooks/useWindowDimension'\n\nconst Home = (props) => {\n    const { \n        categories,\n        slides,\n        items,\n        news,\n        brands,\n        hgTags,\n        tags,\n        currentLanguage,\n    } = props\n\n    const { t } = useTranslation()\n\n    const { width } = useWindowDimensions()\n\n    return (\n        <PaddingContainer className={classes.main}>\n            <MaxWidthContainer>\n                <Helmet \n                    htmlAttributes={{\"lang\": \"ua\", \"amp\": undefined}}\n                    title={`${t(\"siteName\")} | ${currentLanguage === \"ru\" ? \"Главная\" : \"Головна\"}`}\n                    meta={[{\"name\": \"description\", \"content\": t(\"siteDescription\")}]}\n                />\n                <AnimatedBlock \n                    className={classes.container}\n                    initial={{opacity: 0, y: -200, transition: { duration: 1 } }}\n                    exit={{ opacity: 0 }}\n                >\n                    <div className={classes.top}>\n                        <div className={classes.catList}>\n                            <CategoriesList categories={categories}/>\n                        </div>\n                        <div className={classes.actionSlider}>\n                            <CustomSlider \n                                type=\"action\"\n                                responsive={[\n                                    {\n                                      breakpoint: 1920,\n                                      settings: {\n                                        slidesToShow: 1,\n                                        slidesToScroll: 1,\n                                      }\n                                    }\n                                ]}\n                            >\n                                {slides.map(item => (\n                                    <MainSlide item={item} key={item._id} currentLanguage={currentLanguage}/>\n                                ))}\n                            </CustomSlider>\n                        </div>\n                    </div>\n                    <div className={classes.popular} id=\"best\">\n                        <SmallItemsList \n                            items={items} \n                            title={t(\"items.itemsListTitle\")} \n                            href={`/catalog?pageNumber=1&pageSize=25&searchBy=popular&from=asc`}\n                            slidesToShow={\n                                width > 1170 ? (items.length > 4 ? 5 : items.length) :\n                                width > 767 ? (items.length > 2 ? 3 : items.length) : \n                                width > 568 ? (items.length > 1 ? 2 : items.length) : 1\n                            }\n                        />\n                    </div>\n                    <div className={classes.tags}>\n                        <HgTags tags={hgTags}/>\n                    </div>\n                    <div className={classes.selector} id=\"selector\">\n                        <ToySelector tags={tags} currentLanguage={currentLanguage}/>\n                    </div>\n                    <div className={classes.insta}>\n                        <InstaBlock/>\n                    </div>\n                    <div className={classes.news} id=\"news\">\n                        <NewsList \n                            items={news}\n                            title={t(\"navigation.news\")}\n                            href=\"/blog\"\n                            slidesToShow={news.length > 3 ? 4 : news.length}\n                        />\n                    </div>\n                    <div className={classes.brands} id=\"brands\">\n                        <h4>{t(\"brands.title\")}</h4>\n                        <div className={classes.brandsSlider}>\n                            <CustomSlider \n                                slidesToShow={\n                                    width > 1170 ? 5 : \n                                    width > 767 ? 5 : \n                                    width > 468 > 3 ? 3 : 1    \n                                }\n                                responsive={[\n                                    {\n                                      breakpoint: 600,\n                                      settings: {\n                                        slidesToShow: 4,\n                                        slidesToScroll: 1,\n                                      }\n                                    },\n                                    {\n                                      breakpoint: 480,\n                                      settings: {\n                                        slidesToShow: 3,\n                                        slidesToScroll: 1\n                                      }\n                                    }\n                                ]}\n                            >\n                                {brands.map(el => (\n                                    <BrandItem \n                                        key={el._id} \n                                        item={el}\n                                    />\n                                ))}\n                            </CustomSlider>\n                        </div>\n                    </div>\n                    <div className={classes.about} id=\"about\">\n                        <h4>{t(\"about.title\")}</h4>\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus urna nunc, scelerisque sed mi eu, fermentum placerat nulla. Vivamus at facilisis turpis. Sed vulputate tincidunt neque vitae faucibus. Donec rhoncus justo odio, eu hendrerit metus gravida id. Maecenas fermentum, lacus ut sollicitudin sodales, orci eros dignissim lectus, in condimentum sem elit ac leo. Donec at massa id ex malesuada porttitor finibus ut urna. Morbi gravida quis est in maximus. Ut in fermentum eros, eget lobortis orci. Donec id sodales elit. Integer sodales dapibus leo sed ultrices. Cras imperdiet lectus est, non lobortis sem vestibulum id.</p>\n                    </div>\n                </AnimatedBlock>\n            </MaxWidthContainer>\n            <img src={sun_img} alt=\"sun\" className={classes.sunImg}/>\n        </PaddingContainer>\n    )\n}\n\nexport default Home","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport Preloader from '../../Components/Common/Preloader/Preloader'\nimport { getActions } from '../../Redux/actionsReducer'\nimport { getBrands } from '../../Redux/brandsReducer'\nimport { getMainCategoriesWithChildren } from '../../Redux/categoryReducer'\nimport { getItems } from '../../Redux/itemsReducer'\nimport { getNews, getViewOnMainPosts } from '../../Redux/newsReducer'\nimport { getHgTags, getTags } from '../../Redux/tagsReducer'\nimport { shuffle } from '../../Utils/shuffle'\nimport Home from './Home'\n\nconst HomeContainer = (props) => {\n    const {\n        categories,\n        isFetching,\n        getActions,\n        actions,\n        items,\n        getItems,\n        hgTags,\n        getHgTags,\n        getNews,\n        news,\n        getBrands,\n        brands,\n        getMainCategoriesWithChildren,\n        mainCategoriesWithChildren,\n        getTags,\n        tags,\n        currentLanguage,\n        getViewOnMainPosts,\n        viewOnMainPosts\n    } = props\n\n    const [shuffleSlides, setShuffleSlides] = useState(actions)\n\n    useEffect(() => {\n        let slides = [...actions]\n        setShuffleSlides(shuffle(slides.concat(viewOnMainPosts)))\n    }, [actions, viewOnMainPosts])\n\n\n    useEffect(() => {\n        getViewOnMainPosts()\n        getActions(1, 100, \"\", \"\", \"\", true)\n        getItems(1, 15, \"rating\", -1, \"\")\n        getNews(1, 8, \"\", \"\", \"\")\n        getBrands(1, 400, \"\", \"\", \"\")\n        getHgTags()\n        getTags(1, 500, \"\", \"\", \"\")\n    }, [])\n\n    return (\n        <>\n            {isFetching && <Preloader/>}\n            \n                <Home \n                    categories={mainCategoriesWithChildren}\n                    actions={actions}\n                    items={items}\n                    news={news}\n                    brands={brands}\n                    hgTags={hgTags}\n                    tags={tags}\n                    currentLanguage={currentLanguage}\n                    viewOnMainPosts={viewOnMainPosts}\n                    slides={shuffleSlides}\n                />\n            \n        </>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n    currentLanguage: state.common.currentLanguage,\n    categories: state.categories.categories,\n    isFetching: state.common.isFetching,\n    actions: state.actions.actions,\n    items: state.items.items,\n    hgTags: state.tags.hgTags,\n    tags: state.tags.tags,\n    news: state.news.news,\n    brands: state.brands.brands,\n    viewOnMainPosts: state.news.viewOnMainPosts,\n    mainCategoriesWithChildren: state.categories.mainCategoriesWithChildren\n})\n\nexport default connect(mapStateToProps, {\n    getActions,\n    getItems,\n    getHgTags,\n    getNews,\n    getBrands,\n    getMainCategoriesWithChildren,\n    getTags,\n    getViewOnMainPosts\n})(HomeContainer)","export const shuffle = (array) => {\n    let currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (currentIndex != 0) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n}"],"names":["props","type","value","useTranslation","t","className","cx","classes","includes","connect","state","currentLanguage","common","item","useState","isNew","setIsNew","discount","setDiscount","navigate","useNavigate","rating","handleClick","itemName","name","name_ua","price","priceParser","useEffect","action","discountParser","moment","created_at","diff","onClick","from_items_count","from_sum_in_bill","src","images","alt","size","ratingValue","readonly","undefined","Button","items","href","title","slidesToShow","length","to","CustomSlider","map","SmallItem","_id","postName","title_ua","format","SampleNextArrow","style","width","useWindowDimensions","display","padding","zIndex","right","top","IconButton","SamplePrevArrow","left","children","dots","infinite","speed","slidesToScroll","autoplay","vertical","verticalSwiping","responsive","breakpoint","settings","swipeToSlide","adaptiveHeight","arrows","draggable","nextArrow","prevArrow","PrettoSlider","styled","Slider","color","height","margin","border","backgroundColor","boxShadow","lineHeight","fontSize","background","borderRadius","transformOrigin","transform","onChange","max","getAriaLabel","valueLabelDisplay","girl2","target","rel","boy2","tag","index","blockIndex","setBlockIndex","tags","el","NewsSmallItem","useStyles","makeStyles","theme","root","fontFamily","borderColor","marginTop","useForm","handleSubmit","reset","control","setValue","material","priceRange","setPriceRange","ageRange","setAgeRange","ages","useChildAge","newTags","nonTag","push","handleAgeRange","minPrice","maxPrice","minAge","maxAge","children_img","onSubmit","data","defaultValue","rules","required","render","field","fieldState","error","TextField","e","onlyNums","replace","Number","event","newValue","select","MenuItem","text","Autocomplete","disablePortal","options","getOptionLabel","option","filterSelectedOptions","limitTags","isOptionEqualToValue","renderInput","params","helperText","message","image","image_mobile","categories","slides","news","brands","hgTags","PaddingContainer","MaxWidthContainer","Helmet","htmlAttributes","meta","AnimatedBlock","initial","opacity","y","transition","duration","exit","CategoriesList","id","SmallItemsList","sun_img","isFetching","actions","viewOnMainPosts","mainCategoriesWithChildren","getActions","getItems","getHgTags","getNews","getBrands","getMainCategoriesWithChildren","getTags","getViewOnMainPosts","shuffleSlides","setShuffleSlides","array","randomIndex","currentIndex","Math","floor","random","shuffle","concat","Preloader"],"sourceRoot":""}