{"version":3,"file":"static/js/3582.6c4ccc5b.chunk.js","mappings":"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","sources":["webpack://front/./src/Components/Common/Breadcrumbs/Breadcrumbs.module.css?f8ff","Components/Common/Breadcrumbs/Breadcrumbs.jsx","Hooks/useDateParse.js","webpack://front/./src/Components/Common/Actions/ActionSmallItem/ActionSmallItem.module.css?515d","Components/Common/Actions/ActionSmallItem/ActionSmallItem.jsx","webpack://front/./src/Pages/Actions/Actions.module.css?5984","Pages/Actions/Actions.jsx","Pages/Actions/ActionsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Breadcrumbs_main__Pfxmq\",\"block\":\"Breadcrumbs_block__esy2n\"};","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { connect } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\nimport classes from './Breadcrumbs.module.css'\n\nconst Breadcrumbs = (props) => {\n    const { currentlanguage, active, items } = props\n\n    const { t } = useTranslation()\n\n    // console.log(active, items)\n\n    return (\n        <div className={classes.main}>\n            <div className={classes.block}>\n                <NavLink to=\"/\">{t(\"navigation.breadcrumbMain\")}</NavLink>\n                <span>&gt;</span>\n            </div>\n            {items && items.map(el => (\n                <div className={classes.block} key={el.href}>\n                    <NavLink to={el.href}>{el.title}</NavLink>\n                    <span>&gt;</span>\n                </div>\n            ))}\n            <p>{active}</p>\n        </div>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n    currentlanguage: state.common.currentlanguage\n})\n\nexport default connect(mapStateToProps, null)(Breadcrumbs)","import moment from \"moment\"\nimport { useTranslation } from \"react-i18next\"\n\nexport const useDateParse = (date) => {\n    const { t } = useTranslation()\n\n    let monthNumber = moment(date).month() + 1\n    let month_string = t(`months.${monthNumber}`)\n\n    let date_string = moment(date).date() + \" \" + month_string\n\n    return date_string\n}","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"ActionSmallItem_main__x8ZOf\"};","import React from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useDateParse } from \"../../../../Hooks/useDateParse\"\nimport classes from './ActionSmallItem.module.css'\n\nconst ActionSmallItem = (props) => {\n    const { action, currentLanguage } = props\n\n    const navigate = useNavigate()\n\n    let start = useDateParse(action.start)\n    let end = useDateParse(action.end)\n\n    let title = currentLanguage === \"ru\" ? action.title : action.title_ua\n\n    const onClick = () => {\n        navigate(`/actions/${title}`)\n    }\n\n    return (\n        <div className={classes.main}>\n            <img src={action.image} alt=\"action\" onClick={onClick} referrerpolicy=\"no-referrer\"/>\n            <span>{start} - {end}</span>\n            <p onClick={onClick}>{title}</p>\n        </div>\n    )\n}\n\nexport default ActionSmallItem","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Actions_main__uWsIE\",\"wrapper\":\"Actions_wrapper__3TReb\"};","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useTranslation } from 'react-i18next'\nimport AnimatedBlock from '../../Components/Animation/AnimatedBlock/AnimatedBlock'\nimport ActionSmallItem from '../../Components/Common/Actions/ActionSmallItem/ActionSmallItem'\nimport Breadcrumbs from '../../Components/Common/Breadcrumbs/Breadcrumbs'\nimport MaxWidthContainer from '../../Components/UI/Container/MaxWidthContainer/MaxWidthContainer'\nimport PaddingContainer from '../../Components/UI/Container/PaddingContainer/PaddingContainer'\nimport classes from './Actions.module.css'\n\nconst Actions = (props) => {\n    const { actions, currentLanguage } = props\n\n    const { t } = useTranslation()\n\n    return (\n        <PaddingContainer className={classes.main}>\n            <MaxWidthContainer className={classes.container}>\n                <Helmet \n                    htmlAttributes={{\"lang\": \"ua\", \"amp\": undefined}}\n                    title={`${t(\"siteName\")} | ${currentLanguage === \"ru\" ? \"Акции\" : \"Акції\"}`}\n                    meta={[{\"name\": \"description\", \"content\": t(\"siteDescription\")}]}\n                />\n                <Breadcrumbs active={t(\"navigation.actions\")}/>\n                <AnimatedBlock className={classes.wrapper}>\n                    {actions.map(el => (\n                        <ActionSmallItem key={el._id} action={el} currentLanguage={currentLanguage}/>\n                    ))}\n                </AnimatedBlock>\n            </MaxWidthContainer>\n        </PaddingContainer>\n    )\n}\n\nexport default Actions","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport Preloader from '../../Components/Common/Preloader/Preloader'\nimport { getActions } from '../../Redux/actionsReducer'\nimport Actions from './Actions'\n\nconst ActionsContainer = (props) => {\n    const {\n        isFetching,\n        actions,\n        getActions,\n        currentLanguage\n    } = props\n\n    useEffect(() => {\n        getActions(1, 25, \"\", \"\", \"\", true)\n    }, [])\n\n    return (\n        <>\n            {isFetching && <Preloader/>}\n                <Actions\n                    actions={actions}\n                    currentLanguage={currentLanguage}\n                />\n            \n        </>\n    )\n}\n\nlet mapStateToProps = (state) => ({\n    isFetching: state.common.isFetching,\n    actions: state.actions.actions,\n    currentLanguage: state.common.currentLanguage\n})\n\nexport default connect(mapStateToProps, {\n    getActions\n})(ActionsContainer)"],"names":["connect","state","currentlanguage","common","props","active","items","t","useTranslation","className","classes","to","map","el","href","title","useDateParse","date","monthNumber","moment","month","month_string","action","currentLanguage","navigate","useNavigate","start","end","title_ua","onClick","src","image","alt","referrerpolicy","actions","PaddingContainer","MaxWidthContainer","Helmet","htmlAttributes","undefined","meta","Breadcrumbs","AnimatedBlock","_id","isFetching","getActions","useEffect","Preloader"],"sourceRoot":""}